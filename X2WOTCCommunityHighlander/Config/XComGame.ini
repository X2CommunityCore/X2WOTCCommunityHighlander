[X2WOTCCommunityHighlander.X2DownloadableContentInfo_X2WOTCCommunityHighlander]
DLCIdentifier="X2WOTCCommunityHighlander"

[X2WOTCCommunityHighlander.X2WOTCCH_UIScreenListener_ShellSplash]
bEnableVersionDisplay=true

[XComGame.CHHelpers]
;SPAWN_EXTRA_TILE=0 ; Uncomment this to increase default spawn size for XCOM
;MAX_TACTICAL_AUTOSAVES=3 ; Uncomment this to change the maximum number of tactical autosaves

;MULTIPART_MISSION_WILL_LOSS_CAP=true ;uncomment this to prevent excessive will loss in LostTowers, Lost&Abandoned, ChosenStronghold, FinalMission

;ENABLE_CHOSEN_RAGDOLL=false
;ENABLE_RAGDOLL_COLLISION=false ; set to true with care, will have performance impacts

;+EXCLUDED_FACTIONS= ;mods will add to this array with any factions that shouldn't be created at game start.
;I mean that's basically going be the vast majority outside of any overhaul mods but still.

; Set to true to allow units becoming immune to a negative trait after being cured of it.
;CHECK_CURED_TRAITS = false

;GrenadeRespectUniqueRule=false ; Set to true to make grenade slot respect unique items rule.
;AmmoSlotBypassUniqueRule=false ; Set to true to make ammo slot ignore unique items rule.

;bDontUnequipWhenWounded=true ; Set to true to make soldier keep their gear when wounded
;bDontUnequipCovertOps=true ; Uncomment to make soldiers on covert ops keep their gear even if ambush risk is 0	

;PreserveProxyUnitData=true ; Set to true to make sure important info on proxy VIP units is copied to the original units

;bSkipCampaignIntroMovies=true ; Set to true to skip the intro movies on campaign start

;;; HL-Docs: ref:ArmorEquipRollDLCPartChance
;+CosmeticDLCNamesUnaffectedByRoll=MyDLCName

;;; HL-Docs: ref:DisableExtraLOSCheckForSmoke
; DisableExtraLOSCheckForSmoke=true

;;; HL-Docs: ref:DisableExtraLOSCheckForPoison
; DisableExtraLOSCheckForPoison=true

;;; HL-Docs: ref:GrenadesRequiringUnitsOnTargetedTiles
; An array of grenade template names for which only units actually on
; painted tiles should be affected by that grenade. Main example is
; smoke, since only units on smoked tiles should get the effect.
; +GrenadesRequiringUnitsOnTargetedTiles=SmokeGrenade
; +GrenadesRequiringUnitsOnTargetedTiles=SmokeGrenadeMk2

;;; HL-Docs: ref:RequiresTargetingActivation
+RequiresTargetingActivation=X2TargetingMethod_Grenade
+RequiresTargetingActivation=X2TargetingMethod_Cone
+RequiresTargetingActivation=X2TargetingMethod_Line
+RequiresTargetingActivation=X2TargetingMethod_BlasterLauncher
+RequiresTargetingActivation=X2TargetingMethod_BlazingPinions
+RequiresTargetingActivation=X2TargetingMethod_Grapple

; Begin Issue #317
;;; HL-Docs: ref:PersonalitySpeech
; Vanilla Attitudes Personality Speech entries
+PersonalitySpeech=( Personality="Personality_ByTheBook",	\\
					CharSpeeches = (	\\
						(CharSpeech="Moving", PersonalityVariant=("Moving_BY_THE_BOOK")),	\\
						(CharSpeech="TargetKilled", PersonalityVariant=("TargetKilled_BY_THE_BOOK")),	\\
						(CharSpeech="Panic", PersonalityVariant=("Panic_BY_THE_BOOK")),	\\
						(CharSpeech="SoldierVIP", PersonalityVariant=("SoldierVIP_BY_THE_BOOK")),	\\
						(CharSpeech="UsefulVIP", PersonalityVariant=("UsefulVIP_BY_THE_BOOK")),	\\
						(CharSpeech="GenericVIP", PersonalityVariant=("GenericVIP_BY_THE_BOOK")),	\\
						(CharSpeech="HostileVIP", PersonalityVariant=("HostileVIP_BY_THE_BOOK")),	\\
						(CharSpeech="LootCaptured", PersonalityVariant=("LootCaptured_BY_THE_BOOK")),	\\
						(CharSpeech="HackWorkstation", PersonalityVariant=("HackWorkstation_BY_THE_BOOK")),	\\
						(CharSpeech="LootSpotted", PersonalityVariant=("LootSpotted_BY_THE_BOOK")),	\\
						(CharSpeech="TargetEliminated", PersonalityVariant=("TargetEliminated_BY_THE_BOOK")),	\\
						(CharSpeech="PickingUpBody", PersonalityVariant=("PickingUpBody_BY_THE_BOOK"))	\\
					))

+PersonalitySpeech=( Personality="Personality_LaidBack",	\\
					CharSpeeches = (	\\
						(CharSpeech="Moving", PersonalityVariant=("Moving_LAID_BACK")),	\\
						(CharSpeech="TargetKilled", PersonalityVariant=("TargetKilled_LAID_BACK")),	\\
						(CharSpeech="Panic", PersonalityVariant=("Panic_LAID_BACK")),	\\
						(CharSpeech="SoldierVIP", PersonalityVariant=("SoldierVIP_LAID_BACK")),	\\
						(CharSpeech="UsefulVIP", PersonalityVariant=("UsefulVIP_LAID_BACK")),	\\
						(CharSpeech="GenericVIP", PersonalityVariant=("GenericVIP_LAID_BACK")),	\\
						(CharSpeech="HostileVIP", PersonalityVariant=("HostileVIP_LAID_BACK")),	\\
						(CharSpeech="LootCaptured", PersonalityVariant=("LootCaptured_LAID_BACK")),	\\
						(CharSpeech="HackWorkstation", PersonalityVariant=("HackWorkstation_LAID_BACK")),	\\
						(CharSpeech="LootSpotted", PersonalityVariant=("LootSpotted_LAID_BACK")),	\\
						(CharSpeech="TargetEliminated", PersonalityVariant=("TargetEliminated_LAID_BACK")),	\\
						(CharSpeech="PickingUpBody", PersonalityVariant=("PickingUpBody_LAID_BACK"))	\\
					))

+PersonalitySpeech=( Personality="Personality_Twitchy",	\\
					CharSpeeches = (	\\
						(CharSpeech="Moving", PersonalityVariant=("Moving_TWITCHY")),	\\
						(CharSpeech="TargetKilled", PersonalityVariant=("TargetKilled_TWITCHY")),	\\
						(CharSpeech="Panic", PersonalityVariant=("Panic_TWITCHY")),	\\
						(CharSpeech="SoldierVIP", PersonalityVariant=("SoldierVIP_TWITCHY")),	\\
						(CharSpeech="UsefulVIP", PersonalityVariant=("UsefulVIP_TWITCHY")),	\\
						(CharSpeech="GenericVIP", PersonalityVariant=("GenericVIP_TWITCHY")),	\\
						(CharSpeech="HostileVIP", PersonalityVariant=("HostileVIP_TWITCHY")),	\\
						(CharSpeech="LootCaptured", PersonalityVariant=("LootCaptured_TWITCHY")),	\\
						(CharSpeech="HackWorkstation", PersonalityVariant=("HackWorkstation_TWITCHY")),	\\
						(CharSpeech="LootSpotted", PersonalityVariant=("LootSpotted_TWITCHY")),	\\
						(CharSpeech="TargetEliminated", PersonalityVariant=("TargetEliminated_TWITCHY")),	\\
						(CharSpeech="PickingUpBody", PersonalityVariant=("PickingUpBody_TWITCHY"))	\\
					))

+PersonalitySpeech=( Personality="Personality_HappyGoLucky",	\\
					CharSpeeches = (	\\
						(CharSpeech="Moving", PersonalityVariant=("Moving_HAPPY_GO_LUCKY")),	\\
						(CharSpeech="TargetKilled", PersonalityVariant=("TargetKilled_HAPPY_GO_LUCKY")),	\\
						(CharSpeech="Panic", PersonalityVariant=("Panic_HAPPY_GO_LUCKY")),	\\
						(CharSpeech="SoldierVIP", PersonalityVariant=("SoldierVIP_HAPPY_GO_LUCKY")),	\\
						(CharSpeech="UsefulVIP", PersonalityVariant=("UsefulVIP_HAPPY_GO_LUCKY")),	\\
						(CharSpeech="GenericVIP", PersonalityVariant=("GenericVIP_HAPPY_GO_LUCKY")),	\\
						(CharSpeech="HostileVIP", PersonalityVariant=("HostileVIP_HAPPY_GO_LUCKY")),	\\
						(CharSpeech="LootCaptured", PersonalityVariant=("LootCaptured_HAPPY_GO_LUCKY")),	\\
						(CharSpeech="HackWorkstation", PersonalityVariant=("HackWorkstation_HAPPY_GO_LUCKY")),	\\
						(CharSpeech="LootSpotted", PersonalityVariant=("LootSpotted_HAPPY_GO_LUCKY")),	\\
						(CharSpeech="TargetEliminated", PersonalityVariant=("TargetEliminated_HAPPY_GO_LUCKY")),	\\
						(CharSpeech="PickingUpBody", PersonalityVariant=("PickingUpBody_HAPPY_GO_LUCKY"))	\\
					))

+PersonalitySpeech=( Personality="Personality_HardLuck",	\\
					CharSpeeches = (	\\
						(CharSpeech="Moving", PersonalityVariant=("Moving_HARD_LUCK")),	\\
						(CharSpeech="TargetKilled", PersonalityVariant=("TargetKilled_HARD_LUCK")),	\\
						(CharSpeech="Panic", PersonalityVariant=("Panic_HARD_LUCK")),	\\
						(CharSpeech="SoldierVIP", PersonalityVariant=("SoldierVIP_HARD_LUCK")),	\\
						(CharSpeech="UsefulVIP", PersonalityVariant=("UsefulVIP_HARD_LUCK")),	\\
						(CharSpeech="GenericVIP", PersonalityVariant=("GenericVIP_HARD_LUCK")),	\\
						(CharSpeech="HostileVIP", PersonalityVariant=("HostileVIP_HARD_LUCK")),	\\
						(CharSpeech="LootCaptured", PersonalityVariant=("LootCaptured_HARD_LUCK")),	\\
						(CharSpeech="HackWorkstation", PersonalityVariant=("HackWorkstation_HARD_LUCK")),	\\
						(CharSpeech="LootSpotted", PersonalityVariant=("LootSpotted_HARD_LUCK")),	\\
						(CharSpeech="TargetEliminated", PersonalityVariant=("TargetEliminated_HARD_LUCK")),	\\
						(CharSpeech="PickingUpBody", PersonalityVariant=("PickingUpBody_HARD_LUCK"))	\\
					))

+PersonalitySpeech=( Personality="Personality_Intense",	\\
					CharSpeeches = (	\\
						(CharSpeech="Moving", PersonalityVariant=("Moving_INTENSE")),	\\
						(CharSpeech="TargetKilled", PersonalityVariant=("TargetKilled_INTENSE")),	\\
						(CharSpeech="Panic", PersonalityVariant=("Panic_INTENSE")),	\\
						(CharSpeech="SoldierVIP", PersonalityVariant=("SoldierVIP_INTENSE")),	\\
						(CharSpeech="UsefulVIP", PersonalityVariant=("UsefulVIP_INTENSE")),	\\
						(CharSpeech="GenericVIP", PersonalityVariant=("GenericVIP_INTENSE")),	\\
						(CharSpeech="HostileVIP", PersonalityVariant=("HostileVIP_INTENSE")),	\\
						(CharSpeech="LootCaptured", PersonalityVariant=("LootCaptured_INTENSE")),	\\
						(CharSpeech="HackWorkstation", PersonalityVariant=("HackWorkstation_INTENSE")),	\\
						(CharSpeech="LootSpotted", PersonalityVariant=("LootSpotted_INTENSE")),	\\
						(CharSpeech="TargetEliminated", PersonalityVariant=("TargetEliminated_INTENSE")),	\\
						(CharSpeech="PickingUpBody", PersonalityVariant=("PickingUpBody_INTENSE"))	\\
					))

; TLP Attitudes Personality Speech entries
; Angry
+PersonalitySpeech=( Personality="Personality_TLE1",	\\
					CharSpeeches = (	\\
						(CharSpeech="Moving", PersonalityVariant=("Moving_HARD_LUCK")),	\\
						(CharSpeech="TargetKilled", PersonalityVariant=("TargetKilled_HARD_LUCK", "TargetKilled_INTENSE")),	\\
						(CharSpeech="Panic", PersonalityVariant=("Panic_HARD_LUCK")),	\\
						(CharSpeech="SoldierVIP", PersonalityVariant=("SoldierVIP_HARD_LUCK")),	\\
						(CharSpeech="UsefulVIP", PersonalityVariant=("UsefulVIP_HARD_LUCK")),	\\
						(CharSpeech="GenericVIP", PersonalityVariant=("GenericVIP_HARD_LUCK")),	\\
						(CharSpeech="HostileVIP", PersonalityVariant=("HostileVIP_HARD_LUCK")),	\\
						(CharSpeech="LootCaptured", PersonalityVariant=("LootCaptured_INTENSE")),	\\
						(CharSpeech="HackWorkstation", PersonalityVariant=("HackWorkstation_HARD_LUCK")),	\\
						(CharSpeech="LootSpotted", PersonalityVariant=("LootSpotted_HARD_LUCK")),	\\
						(CharSpeech="TargetEliminated", PersonalityVariant=("TargetEliminated_HARD_LUCK")),	\\
						(CharSpeech="PickingUpBody", PersonalityVariant=("PickingUpBody_HARD_LUCK"))	\\
					))

; Cocky
+PersonalitySpeech=( Personality="Personality_TLE2",	\\
					CharSpeeches = (	\\
						(CharSpeech="Moving", PersonalityVariant=("Moving_COLD", "Moving_LAID_BACK")),	\\
						(CharSpeech="TargetKilled", PersonalityVariant=("TargetKilled_COLD")),	\\
						(CharSpeech="Panic", PersonalityVariant=("Panic_COLD")),	\\
						(CharSpeech="SoldierVIP", PersonalityVariant=("SoldierVIP_COLD")),	\\
						(CharSpeech="UsefulVIP", PersonalityVariant=("UsefulVIP_COLD")),	\\
						(CharSpeech="GenericVIP", PersonalityVariant=("GenericVIP_COLD")),	\\
						(CharSpeech="HostileVIP", PersonalityVariant=("HostileVIP_COLD")),	\\
						(CharSpeech="LootCaptured", PersonalityVariant=("LootCaptured_COLD")),	\\
						(CharSpeech="HackWorkstation", PersonalityVariant=("HackWorkstation_COLD")),	\\
						(CharSpeech="LootSpotted", PersonalityVariant=("LootSpotted_COLD")),	\\
						(CharSpeech="TargetEliminated", PersonalityVariant=("TargetEliminated_COLD")),	\\
						(CharSpeech="PickingUpBody", PersonalityVariant=("PickingUpBody_COLD"))	\\
					))

; Suspicious
+PersonalitySpeech=( Personality="Personality_TLE3",	\\
					CharSpeeches = (	\\
						(CharSpeech="Moving", PersonalityVariant=("Moving_TWITCHY")),	\\
						(CharSpeech="TargetKilled", PersonalityVariant=("TargetKilled_TWITCHY")),	\\
						(CharSpeech="Panic", PersonalityVariant=("Panic_TWITCHY")),	\\
						(CharSpeech="SoldierVIP", PersonalityVariant=("SoldierVIP_TWITCHY")),	\\
						(CharSpeech="UsefulVIP", PersonalityVariant=("UsefulVIP_TWITCHY")),	\\
						(CharSpeech="GenericVIP", PersonalityVariant=("GenericVIP_TWITCHY")),	\\
						(CharSpeech="HostileVIP", PersonalityVariant=("HostileVIP_TWITCHY")),	\\
						(CharSpeech="LootCaptured", PersonalityVariant=("LootCaptured_TWITCHY")),	\\
						(CharSpeech="HackWorkstation", PersonalityVariant=("HackWorkstation_TWITCHY")),	\\
						(CharSpeech="LootSpotted", PersonalityVariant=("LootSpotted_TWITCHY")),	\\
						(CharSpeech="TargetEliminated", PersonalityVariant=("TargetEliminated_TWITCHY")),	\\
						(CharSpeech="PickingUpBody", PersonalityVariant=("PickingUpBody_TWITCHY"))	\\
					))

; Smug
+PersonalitySpeech=( Personality="Personality_TLE4",	\\
					CharSpeeches = (	\\
						(CharSpeech="Moving", PersonalityVariant=("Moving_LAID_BACK", "Moving_HAPPY_GO_LUCKY")),	\\
						(CharSpeech="TargetKilled", PersonalityVariant=("TargetKilled_LAID_BACK", "TargetKilled_HAPPY_GO_LUCKY")),	\\
						(CharSpeech="Panic", PersonalityVariant=("Panic_LAID_BACK")),	\\
						(CharSpeech="SoldierVIP", PersonalityVariant=("SoldierVIP_LAID_BACK")),	\\
						(CharSpeech="UsefulVIP", PersonalityVariant=("UsefulVIP_LAID_BACK")),	\\
						(CharSpeech="GenericVIP", PersonalityVariant=("GenericVIP_LAID_BACK")),	\\
						(CharSpeech="HostileVIP", PersonalityVariant=("HostileVIP_LAID_BACK")),	\\
						(CharSpeech="LootCaptured", PersonalityVariant=("LootCaptured_LAID_BACK")),	\\
						(CharSpeech="HackWorkstation", PersonalityVariant=("HackWorkstation_LAID_BACK")),	\\
						(CharSpeech="LootSpotted", PersonalityVariant=("LootSpotted_LAID_BACK")),	\\
						(CharSpeech="TargetEliminated", PersonalityVariant=("TargetEliminated_LAID_BACK")),	\\
						(CharSpeech="PickingUpBody", PersonalityVariant=("PickingUpBody_LAID_BACK"))	\\
					))

; Let's Go
+PersonalitySpeech=( Personality="Personality_TLE5",	\\
					CharSpeeches = (	\\
						(CharSpeech="Moving", PersonalityVariant=("Moving_INTENSE")),	\\
						(CharSpeech="TargetKilled", PersonalityVariant=("TargetKilled_INTENSE")),	\\
						(CharSpeech="Panic", PersonalityVariant=("Panic_INTENSE")),	\\
						(CharSpeech="SoldierVIP", PersonalityVariant=("SoldierVIP_INTENSE")),	\\
						(CharSpeech="UsefulVIP", PersonalityVariant=("UsefulVIP_INTENSE")),	\\
						(CharSpeech="GenericVIP", PersonalityVariant=("GenericVIP_INTENSE")),	\\
						(CharSpeech="HostileVIP", PersonalityVariant=("HostileVIP_INTENSE")),	\\
						(CharSpeech="LootCaptured", PersonalityVariant=("LootCaptured_HARD_LUCK")),	\\
						(CharSpeech="HackWorkstation", PersonalityVariant=("HackWorkstation_INTENSE")),	\\
						(CharSpeech="LootSpotted", PersonalityVariant=("LootSpotted_INTENSE")),	\\
						(CharSpeech="TargetEliminated", PersonalityVariant=("TargetEliminated_INTENSE")),	\\
						(CharSpeech="PickingUpBody", PersonalityVariant=("PickingUpBody_INTENSE"))	\\
					))
; End Issue #317

; Range (in meters) of the 'AlertedByYell' alert produced by fleeing civilians through the DoNoiseAlert action.
+NoiseAlertSoundRange=27

;	If a Unit has at least one Reserve Action Point of these types
;	they will display an Overwatch "eye" icon under their unit flag.
+ValidReserveAPForUnitFlag = "overwatch"
+ValidReserveAPForUnitFlag = "pistoloverwatch"

;;; HL-Docs: ref:ProjectilePerformanceDrain
; The following line is an example/template. See feature documentation for more info.
;+ProjectileParticleSystemExpirationOverrides=(ParticleSystemPathName="SomePackage.P_SomeParticleSystem", ExpiryTime=120)

; Uncomment the following line to override the default delay (for particles not listed above).
; Lower values will result in lower RAM usage and better FPS, but there is a risk of
; destroying smoke trails (and similar) prematurely.
; Values below 5 (seconds) will be ignored.
;ProjectileParticleSystemExpirationDefaultOverride=60

;;; HL-Docs: ref:ConsiderAlliesforSoundAlerts
;bConsiderAlliesforSoundAlerts=true 

;;; HL-Docs: ref:BetaStrikeEndTacticalHeal
;;; With Beta Strike enabled, soldiers are normally immediately healed for 50% of their missing HP after a mission. Uncomment this to disable this behavior.
;bDisableBetaStrikePostMissionHealing=true 


;;; HL-Docs: ref:EuroDateOverride
; Uncomment the following line to set European date style for INT localization
; bForceEuroDateStrings = true

;;; HL-Docs: ref:DrawDebugLabels
; Uncomment the following line to enable the DrawDebugLabels CHL event
; bDrawDebugLabels = true

;;; HL-Docs: ref:MixedCharacterPoolChance
; Set the chance of using a Character Pool character when Character Pool is in Mixed mode.
; A value between 0 and 100 is expected.
iMixedCharacterPoolChance = 50

;;; HL-Docs: ref:UseMinDamageForUnitFlagPreview
; Uncomment the following line to make the Unit Flag damage preview show minimum damage
; rather than maximum damage.
; bUseMinDamageForUnitFlagPreview = true

;;; HL-Docs: ref:DisableAimAssist
; Uncomment the following line to disable Aim Assist.
; bDisableAimAssist = true

; Issue #1400 - Uncomment to force 24h clock and/or addition of a leading zero to the hours (e.g. to display 03:45 instead of 3:45 on the geoscape)
;bForce24hClock = true
;bForce24hClockLeadingZero = true

;;; HL-Docs: ref:PositiveTraitUI
; Uncomment the following line to show UIAlerts at the end of a mission and on campaign start for all Traits instead of just the first one.
; bShowAllTraitAcquiredPopups = true

;;; Issue #1398 - Change to adjust the delay of the 'Squad member dead' voiceline after a unit is killed
fSquadMemberDeadVoicelineDelay = 3.0f

;;; HL-Docs: ref:DisableAutoPhotos
; Uncomment to disable automatic photobooth poster generation when certain events happen
;bDisableAutomaticMissionPhoto = true
;bDisableAutomaticMemorialPhoto = true
;bDisableAutomaticPromotionPhoto = true
;bDisableAutomaticBondPhoto = true

; Start Issue #1325
;;; HL-Docs: ref:CHL_SetupActionsForBeginTurn
; In the base game, turn interruptions behave inconsistently in certain scenarios. Things like burn, poison, and acid don't tick. And yet, things like untouchable and unit values get reset.
; It makes the most sense that those things DON'T get reset, as the unit isn't taking a typical turn. This is why this area is here and why the default values for the below variables are the way they are.
; Of course, if there's disagreements on what should be allowed to happen in interruptions, then feel free to change the default values!
EnableImprovedInterruptionLogic = false					; Enables this area. This NEEDS to be true for any other option in this issue to work. If it is true, make sure all other options in this issue are AT LEAST UNCOMMENTED.

InterruptionsGiveActionPoints = true					; Should interruptions give action points, just like a normal turn would?												Default is true, because skirmisher interrupt assumes it is for its ability logic.
InterruptionsResetUntouchable = false					; Should interruptions reset untouchable, just like a normal turn would?												Default is false, because the unit isn't taking a typical turn.
InterruptionsResetGotFreeFireAction = false				; Just like a normal turn, should interruptions reset the hair trigger proc, so it can be used again?					Default is false, because the unit isn't taking a typical turn.
InterruptionsHandleMovementUnitValues = false			; Should interruptions manipulate movement values, just like a normal turn?												Default is false, because the unit isn't taking a typical turn.
InterruptionsCleanupBeginTurnUnitValues = false			; Should interruptions clear unit values that use eCleanup_BeginTurn, just like a normal turn?							Default is false, because the unit isn't taking a typical turn.
InterruptionsUpdateTurnStartLocation = false			; Should interruptions update turn start location, just like a normal turn?												Default is false, because the unit isn't taking a typical turn.
InterruptionsResetPanicTestsPerformedThisTurn = false	; Should interruptions reset the tracker for the amount of panic tests performed this turn, just like a normal turn?	Default is false, because the unit isn't taking a typical turn.
InterruptionsTriggerGroupTurnBegunEvent = true			; Should interruptions trigger the GroupTurnBegunEvent, just like what happens in a normal turn.						Default is true, because interruptions work closely with "groups" (XComGameState_AIGroup) in the code side of things.
; End Issue #1325

; Start Issue #1486
;Uncomment to exclude civilians from being selected in the X2AllowSelectAll Console Command
;ExcludeCiviliansFromX2AllowSelectAll = true
;Uncomment to alert & scamper all aliens when using X2AllowSelectAll - allows all alien units to move normally
;UseImprovedX2AllowSelectAllBehavior = true
; End Issue #1486
