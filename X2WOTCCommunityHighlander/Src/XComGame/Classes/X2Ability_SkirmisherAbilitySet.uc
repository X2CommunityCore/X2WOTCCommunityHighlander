class X2Ability_SkirmisherAbilitySet extends X2Ability
	config(GameData_SoldierSkills);

var config int FullThrottleMobility;
var config int INTERRUPT_CHARGES;
var config float PARKOUR_TRIGGER_CHANCE;
var config int NUM_PARKOUR_ACTION_POINTS;
var config int RECKONING_DMG, RECKONING_AIM;
var config int WHIPLASH_CHARGES;
var config WeaponDamageValue WHIPLASH_BASEDAMAGE;
var config int JUDGMENT_APPLYCHANCEATTACKVAL;
var config int JUDGMENT_MINCHANCE;
var config int JUDGMENT_MAXCHANCE;
var config int JUSTICE_HIT_BONUS;
var config int WRATH_HIT_BONUS;
var config int RECKONING_COOLDOWN;
var config int BATTLELORD_ACTIONS;

var localized string ParkourFlyoverText;
var localized string FullThrottleBonusText;

static function array<X2DataTemplate> CreateTemplates()
{
	local array<X2DataTemplate> Templates;

	Templates.AddItem(SkirmisherGrapple());
	Templates.AddItem(SkirmisherStrike());
	Templates.AddItem(SkirmisherReflex());
	Templates.AddItem(FullThrottle());
	Templates.AddItem(FullThrottlePassive());
	Templates.AddItem(SkirmisherAmbush());
	Templates.AddItem(CombatPresence());
	Templates.AddItem(TotalCombat());
	Templates.AddItem(ZeroIn());
	Templates.AddItem(Retribution());
	Templates.AddItem(RetributionAttack());
	Templates.AddItem(SkirmisherMelee());
	Templates.AddItem(Reckoning());
	Templates.AddItem(SkirmisherPostAbilityMelee());
	Templates.AddItem(Justice());
	Templates.AddItem(ForwardOperator());
	Templates.AddItem(ManualOverride());
	Templates.AddItem(Parkour());
	Templates.AddItem(ParkourPassive());
	Templates.AddItem(SkirmisherVengeance());
	Templates.AddItem(Whiplash());
	Templates.AddItem(Judgment());
	Templates.AddItem(JudgmentTrigger());
	Templates.AddItem(SkirmisherInterrupt());
	Templates.AddItem(SkirmisherInterruptInput());
	Templates.AddItem(Battlelord());
	Templates.AddItem(SkirmisherReturnFire());

	return Templates;
}

static function X2AbilityTemplate SkirmisherGrapple()
{
	local X2AbilityTemplate			Template;

	Template = class'X2Ability_DefaultAbilitySet'.static.AddGrapple('SkirmisherGrapple');
	Template.IconImage = "img:///UILibrary_XPACK_Common.PerkIcons.UIPerk_grapple";

	return Template;
}

static function X2AbilityTemplate SkirmisherStrike()
{
	local X2AbilityTemplate			Template;

	Template = PurePassive('SkirmisherStrike', "img:///UILibrary_XPACK_Common.PerkIcons.UIPerk_strike");

	return Template;
}

static function X2AbilityTemplate SkirmisherReflex()
{
	local X2AbilityTemplate						Template;
	local X2Effect_SkirmisherReflex				ReflexEffect;

	`CREATE_X2ABILITY_TEMPLATE(Template, 'SkirmisherReflex');
	Template.IconImage = "img:///UILibrary_XPACK_Common.PerkIcons.UIPerk_reflex";

	Template.AbilitySourceName = 'eAbilitySource_Perk';
	Template.eAbilityIconBehaviorHUD = eAbilityIconBehavior_NeverShow;
	Template.Hostility = eHostility_Neutral;

	Template.AbilityToHitCalc = default.DeadEye;
	Template.AbilityTargetStyle = default.SelfTarget;
	Template.AbilityTriggers.AddItem(default.UnitPostBeginPlayTrigger);

	ReflexEffect = new class'X2Effect_SkirmisherReflex';
	ReflexEffect.BuildPersistentEffect(1, true, false, false);
	ReflexEffect.SetDisplayInfo(ePerkBuff_Passive, Template.LocFriendlyName, Template.LocLongDescription, Template.IconImage, true, , Template.AbilitySourceName);
	Template.AddTargetEffect(ReflexEffect);

	Template.BuildNewGameStateFn = TypicalAbility_BuildGameState;
	//  NOTE: No visualization on purpose!
//BEGIN AUTOGENERATED CODE: Template Overrides 'SkirmisherReflex'
	Template.ActivationSpeech = 'Reflex';
//END AUTOGENERATED CODE: Template Overrides 'SkirmisherReflex'

	return Template;
}

static function X2AbilityTemplate FullThrottle()
{
	local X2AbilityTemplate						Template;
	local X2Effect_PersistentStatChange			StatChangeEffect;
	local X2AbilityTrigger_EventListener		EventListenerTrigger;

	`CREATE_X2ABILITY_TEMPLATE(Template, 'FullThrottle');
//BEGIN AUTOGENERATED CODE: Template Overrides 'FullThrottle'
	Template.IconImage = "img:///UILibrary_XPACK_Common.PerkIcons.UIPerk_FullThrottle";
	Template.ActivationSpeech = 'FullThrottle';
//END AUTOGENERATED CODE: Template Overrides 'FullThrottle'

	Template.AbilitySourceName = 'eAbilitySource_Perk';
	Template.eAbilityIconBehaviorHUD = eAbilityIconBehavior_NeverShow;
	Template.Hostility = eHostility_Neutral;

	Template.AbilityToHitCalc = default.DeadEye;
	Template.AbilityTargetStyle = default.SelfTarget;
	
	EventListenerTrigger = new class'X2AbilityTrigger_EventListener';
	EventListenerTrigger.ListenerData.Deferral = ELD_OnStateSubmitted;
	EventListenerTrigger.ListenerData.EventID = 'UnitDied';
	EventListenerTrigger.ListenerData.Filter = eFilter_None;
	EventListenerTrigger.ListenerData.EventFn = class'XComGameState_Ability'.static.FullThrottleListener;
	Template.AbilityTriggers.AddItem(EventListenerTrigger);

	StatChangeEffect = new class'X2Effect_PersistentStatChange';
	StatChangeEffect.AddPersistentStatChange(eStat_Mobility, default.FullThrottleMobility);	
	StatChangeEffect.BuildPersistentEffect(1, false, true, false, eGameRule_PlayerTurnEnd);
	StatChangeEffect.SetDisplayInfo(ePerkBuff_Bonus, Template.LocFriendlyName, default.FullThrottleBonusText, Template.IconImage, true, , Template.AbilitySourceName);
	StatChangeEffect.EffectName = 'FullThrottleStats';
	Template.AddTargetEffect(StatChangeEffect);

	Template.bSkipFireAction = true;
	Template.bShowActivation = true;
	Template.BuildNewGameStateFn = TypicalAbility_BuildGameState;
	Template.BuildVisualizationFn = TypicalAbility_BuildVisualization;
	Template.AdditionalAbilities.AddItem('FullThrottlePassive');

	return Template;
}

static function X2AbilityTemplate FullThrottlePassive()
{
	local X2AbilityTemplate		Template;

	Template = PurePassive('FullThrottlePassive', "img:///UILibrary_XPACK_Common.PerkIcons.UIPerk_FullThrottle", , 'eAbilitySource_Perk');

	return Template;
}

static function X2AbilityTemplate SkirmisherAmbush()
{
	local X2AbilityTemplate			Template;

	Template = PurePassive('SkirmisherAmbush', "img:///UILibrary_XPACK_Common.PerkIcons.UIPerk_ambush");
//BEGIN AUTOGENERATED CODE: Template Overrides 'SkirmisherAmbush'
	Template.ActivationSpeech = 'Ambush';
//END AUTOGENERATED CODE: Template Overrides 'SkirmisherAmbush'

	return Template;
}

static function X2AbilityTemplate CombatPresence()
{
	local X2AbilityTemplate				Template;
	local X2AbilityCost_ActionPoints	ActionPointCost;
	local X2AbilityCooldown             Cooldown;
	local X2Effect_GrantActionPoints	ActionPointEffect;
	local X2Condition_UnitProperty      TargetCondition;
	
	`CREATE_X2ABILITY_TEMPLATE(Template, 'CombatPresence');

	Template.AbilitySourceName = 'eAbilitySource_Perk';
	Template.IconImage = "img:///UILibrary_XPACK_Common.PerkIcons.UIPerk_CombatPresence";
	Template.ShotHUDPriority = class'UIUtilities_Tactical'.const.CLASS_CORPORAL_PRIORITY;
	Template.Hostility = eHostility_Defensive;
	Template.bLimitTargetIcons = true;
	Template.eAbilityIconBehaviorHUD = eAbilityIconBehavior_AlwaysShow;

	Template.AbilityTriggers.AddItem(default.PlayerInputTrigger);

	ActionPointCost = new class'X2AbilityCost_ActionPoints';
	ActionPointCost.iNumPoints = 1;
	ActionPointCost.AllowedTypes.RemoveItem(class'X2CharacterTemplateManager'.default.SkirmisherInterruptActionPoint);
	Template.AbilityCosts.AddItem(ActionPointCost);

	Cooldown = New class'X2AbilityCooldown';
	Cooldown.iNumTurns = 3;
	Template.AbilityCooldown = Cooldown;

	Template.AbilityToHitCalc = default.DeadEye;

	Template.AbilityShooterConditions.AddItem(default.LivingShooterProperty);
	Template.AddShooterEffectExclusions();

	TargetCondition = new class'X2Condition_UnitProperty';
	TargetCondition.ExcludeHostileToSource = true;
	TargetCondition.ExcludeFriendlyToSource = false;
	TargetCondition.RequireSquadmates = true;
	TargetCondition.FailOnNonUnits = true;
	TargetCondition.ExcludeDead = true;
	TargetCondition.ExcludeRobotic = false;
	TargetCondition.ExcludeUnableToAct = true;
	Template.AbilityTargetConditions.AddItem(TargetCondition);
	Template.AbilityTargetConditions.AddItem(default.GameplayVisibilityCondition);

	ActionPointEffect = new class'X2Effect_GrantActionPoints';
	ActionPointEffect.NumActionPoints = 1;
	ActionPointEffect.PointType = class'X2CharacterTemplateManager'.default.StandardActionPoint;
	ActionPointEffect.bSelectUnit = true;
	Template.AddTargetEffect(ActionPointEffect);

	Template.AbilityTargetStyle = default.SimpleSingleTarget;

	Template.bShowActivation = true;
//BEGIN AUTOGENERATED CODE: Template Overrides 'CombatPresence'
	Template.bSkipFireAction = false;
	Template.bSkipExitCoverWhenFiring = true;
	Template.AbilityConfirmSound = "Combat_Presence_Activate";
	Template.CustomFireAnim = 'HL_Teamwork';
	Template.ActivationSpeech = 'CombatPresence';
	Template.CinescriptCameraType = "Skirmisher_CombatPresence";
//END AUTOGENERATED CODE: Template Overrides 'CombatPresence'
	Template.BuildNewGameStateFn = TypicalAbility_BuildGameState;
	Template.BuildVisualizationFn = TypicalAbility_BuildVisualization;

	Template.ChosenActivationIncreasePerUse = class'X2AbilityTemplateManager'.default.NonAggressiveChosenActivationIncreasePerUse;
	
	return Template;
}

static function X2AbilityTemplate TotalCombat()
{
	local X2AbilityTemplate			Template;

	Template = PurePassive('TotalCombat', "img:///UILibrary_XPACK_Common.PerkIcons.UIPerk_totalCombat");

	return Template;
}

static function X2AbilityTemplate ZeroIn()
{
	local X2AbilityTemplate			Template;
	local X2Effect_ZeroIn			BonusEffect;

	`CREATE_X2ABILITY_TEMPLATE(Template, 'ZeroIn');

	Template.AbilitySourceName = 'eAbilitySource_Perk';
	Template.eAbilityIconBehaviorHUD = EAbilityIconBehavior_NeverShow;
	Template.Hostility = eHostility_Neutral;
	Template.IconImage = "img:///UILibrary_XPACK_Common.PerkIcons.UIPerk_ZeroIn";

	Template.AbilityToHitCalc = default.DeadEye;
	Template.AbilityTargetStyle = default.SelfTarget;
	Template.AbilityTriggers.AddItem(default.UnitPostBeginPlayTrigger);

	BonusEffect = new class'X2Effect_ZeroIn';
	BonusEffect.BuildPersistentEffect(1, true, false, false);
	BonusEffect.SetDisplayInfo(ePerkBuff_Passive, Template.LocFriendlyName, Template.GetMyHelpText(), Template.IconImage, true, , Template.AbilitySourceName);
	Template.AddTargetEffect(BonusEffect);

	Template.BuildNewGameStateFn = TypicalAbility_BuildGameState;
	//  NOTE: No visualization on purpose!

	return Template;
}

static function X2AbilityTemplate Retribution()
{
	local X2AbilityTemplate                 Template;

	Template = PurePassive('Retribution', "img:///UILibrary_XPACK_Common.PerkIcons.UIPerk_Retribution", false, 'eAbilitySource_Perk');
	Template.AdditionalAbilities.AddItem('RetributionAttack');
//BEGIN AUTOGENERATED CODE: Template Overrides 'Retribution'
	Template.ActivationSpeech = 'Retribution';
//END AUTOGENERATED CODE: Template Overrides 'Retribution'

	return Template;
}

static function X2AbilityTemplate RetributionAttack()
{
	local X2AbilityTemplate			Template;

	Template = class'X2Ability_RangerAbilitySet'.static.BladestormAttack('RetributionAttack');
	Template.IconImage = "img:///UILibrary_XPACK_Common.PerkIcons.UIPerk_Retribution";
	Template.bFrameEvenWhenUnitIsHidden = false;

	return Template;
}

static function X2AbilityTemplate SkirmisherMelee()
{
	local X2AbilityTemplate				Template;
	local X2AbilityCost_ActionPoints	ActionPointCost;
	local X2AbilityCooldown				Cooldown;
	local int i;

	Template = class'X2Ability_RangerAbilitySet'.static.AddSwordSliceAbility('SkirmisherMelee');
	Template.bFrameEvenWhenUnitIsHidden = true;
	Template.CinescriptCameraType = "Skirmisher_Melee";
	
	for (i = 0; i < Template.AbilityCosts.Length; ++i)
	{
		ActionPointCost = X2AbilityCost_ActionPoints(Template.AbilityCosts[i]);
		if (ActionPointCost != none)
			ActionPointCost.bConsumeAllPoints = false;
	}
	Cooldown = new class'X2AbilityCooldown';
	Cooldown.iNumTurns = default.RECKONING_COOLDOWN;
	Template.AbilityCooldown = Cooldown;

	return Template;
}

static function X2AbilityTemplate Reckoning()
{
	local X2AbilityTemplate						Template;
	local X2AbilityCooldown				Cooldown;

	Template = PurePassive('Reckoning', "img:///UILibrary_XPACK_Common.PerkIcons.UIPerk_Reckoning");
	Template.AdditionalAbilities.AddItem('SkirmisherMelee');

	Cooldown = new class'X2AbilityCooldown';
	Cooldown.iNumTurns = default.RECKONING_COOLDOWN;
	Template.AbilityCooldown = Cooldown;

	return Template;
}

static function X2AbilityTemplate SkirmisherPostAbilityMelee()
{
	local X2AbilityTemplate                         Template;
	local X2AbilityTrigger_EventListener			AbilityTrigger;

	Template = class'X2Ability_RangerAbilitySet'.static.AddSwordSliceAbility('SkirmisherPostAbilityMelee');
	Template.bFrameEvenWhenUnitIsHidden = true;
	Template.CinescriptCameraType = "Skirmisher_Melee";

	Template.eAbilityIconBehaviorHUD = eAbilityIconBehavior_NeverShow;
	Template.AbilityTriggers.Length = 0;

	AbilityTrigger = new class'X2AbilityTrigger_EventListener';
	AbilityTrigger.ListenerData.Deferral = ELD_OnStateSubmitted;
	AbilityTrigger.ListenerData.EventID = 'ActivateSkirmisherMelee';
	AbilityTrigger.ListenerData.Filter = eFilter_Unit;
	AbilityTrigger.ListenerData.EventFn = class'XComGameState_Ability'.static.AbilityTriggerEventListener_OriginalTarget;
	Template.AbilityTriggers.AddItem(AbilityTrigger);

	Template.MergeVisualizationFn = DesiredVisualizationBlock_MergeVisualization;

	X2AbilityToHitCalc_StandardAim(Template.AbilityToHitCalc).bGuaranteedHit = true;
	Template.AbilityCosts.Length = 0;

	Template.DefaultSourceItemSlot = eInvSlot_SecondaryWeapon;
	Template.bUniqueSource = true;	

	return Template;
}

static function X2AbilityTemplate Justice()
{
	local X2AbilityTemplate                 Template;
	local X2AbilityCost_ActionPoints        ActionPointCost;
	local X2AbilityCooldown                 Cooldown;
	local X2Condition_UnitProperty          UnitPropertyCondition;
	local X2Condition_UnblockedNeighborTile UnblockedNeighborTileCondition;
	local X2AbilityToHitCalc_StandardAim    StandardAim;
	local X2Effect_GetOverHere              GetOverHereEffect;
	local X2Effect_TriggerEvent				PostAbilityMelee;
	local X2Effect_ApplyWeaponDamage		EnvironmentDamageForProjectile;
	local X2Effect_RemoveEffects			RemoveEffects;

	`CREATE_X2ABILITY_TEMPLATE(Template, 'Justice');
	Template.IconImage = "img:///UILibrary_XPACK_Common.PerkIcons.UIPerk_Justice";

	Template.AbilitySourceName = 'eAbilitySource_Standard';
	Template.eAbilityIconBehaviorHUD = eAbilityIconBehavior_AlwaysShow;
	Template.Hostility = eHostility_Offensive;

	ActionPointCost = new class'X2AbilityCost_ActionPoints';
	ActionPointCost.iNumPoints = 1;
	ActionPointCost.bConsumeAllPoints = false;
	Template.AbilityCosts.AddItem(ActionPointCost);

    Cooldown = New class'X2AbilityCooldown';
	Cooldown.iNumTurns = 5;
	Template.AbilityCooldown = Cooldown;

	Template.AbilityShooterConditions.AddItem(default.LivingShooterProperty);
	Template.AddShooterEffectExclusions();

	// There must be a free tile around the source unit
	UnblockedNeighborTileCondition = new class'X2Condition_UnblockedNeighborTile';
	UnblockedNeighborTileCondition.RequireVisible = true;
	Template.AbilityShooterConditions.AddItem(UnblockedNeighborTileCondition);

	// The Target must be alive and a humanoid
	UnitPropertyCondition = new class'X2Condition_UnitProperty';
	UnitPropertyCondition.ExcludeDead = true;
	UnitPropertyCondition.ExcludeRobotic = true;
	UnitPropertyCondition.ExcludeNonHumanoidAliens = true;
	UnitPropertyCondition.ExcludeFriendlyToSource = true;
	UnitPropertyCondition.RequireWithinMinRange = true;

	/// HL-Docs: ref:Bugfixes; issue:1293
	/// Allow Justice to target enemies Mind Controlled by XCOM
	UnitPropertyCondition.TreatMindControlledSquadmateAsHostile = true;

	Template.AbilityTargetConditions.AddItem(UnitPropertyCondition);

	Template.AbilityTargetConditions.AddItem(default.GameplayVisibilityCondition);
	//	prevent various stationary units from being pulled inappropriately
	Template.AbilityTargetConditions.AddItem(class'X2Ability_TemplarAbilitySet'.static.InvertAndExchangeEffectsCondition());

	Template.AbilityTargetStyle = new class'X2AbilityTarget_Single';
	Template.AbilityTriggers.AddItem(default.PlayerInputTrigger);

	// This will attack using the standard aim
	StandardAim = new class'X2AbilityToHitCalc_StandardAim';
	StandardAim.BuiltInHitMod = default.JUSTICE_HIT_BONUS;
	StandardAim.bAllowCrit = false;
	Template.AbilityToHitCalc = StandardAim;

	GetOverHereEffect = new class'X2Effect_GetOverHere';
 	GetOverHereEffect.OverrideStartAnimName = 'NO_GrapplePullStart';
 	GetOverHereEffect.OverrideStopAnimName = 'NO_GrapplePullStop';
	GetOverHereEffect.RequireVisibleTile = true;
	Template.AddTargetEffect(GetOverHereEffect);

	EnvironmentDamageForProjectile = new class'X2Effect_ApplyWeaponDamage';
	EnvironmentDamageForProjectile.bIgnoreBaseDamage = true;
	EnvironmentDamageForProjectile.EnvironmentalDamageAmount = 30;
	Template.AddTargetEffect(EnvironmentDamageForProjectile);

	PostAbilityMelee = new class'X2Effect_TriggerEvent';
	PostAbilityMelee.TriggerEventName = 'ActivateSkirmisherMelee';
	Template.AddTargetEffect(PostAbilityMelee);
	Template.AdditionalAbilities.AddItem('SkirmisherPostAbilityMelee');

	RemoveEffects = new class'X2Effect_RemoveEffects';
	RemoveEffects.EffectNamesToRemove.AddItem(class'X2Effect_Suppression'.default.EffectName);
	Template.AddTargetEffect(RemoveEffects);

	Template.bForceProjectileTouchEvents = true;

	Template.BuildNewGameStateFn = TypicalAbility_BuildGameState;
	Template.BuildVisualizationFn = Justice_BuildVisualization;
	Template.BuildInterruptGameStateFn = TypicalAbility_BuildInterruptGameState;
	Template.Hostility = eHostility_Offensive;
	Template.DamagePreviewFn = PostAbilityMeleeDamagePreview;
//BEGIN AUTOGENERATED CODE: Template Overrides 'Justice'
	Template.bFrameEvenWhenUnitIsHidden = true;
	Template.ActionFireClass = class'XComGame.X2Action_ViperGetOverHere';
	Template.ActivationSpeech = 'Justice';
//END AUTOGENERATED CODE: Template Overrides 'Justice'
		
	return Template;
}

static function Justice_BuildVisualization(XComGameState VisualizeGameState)
{
	local XComGameStateVisualizationMgr VisMgr;
	local X2Action_ViperGetOverHere GetOverHereAction;
	local X2Action_ExitCover ExitCover;

	VisMgr = `XCOMVISUALIZATIONMGR;

	TypicalAbility_BuildVisualization(VisualizeGameState);

	ExitCover = X2Action_ExitCover(VisMgr.GetNodeOfType(VisMgr.BuildVisTree, class'X2Action_ExitCover'));
	ExitCover.bUsePreviousGameState = true;

	GetOverHereAction = X2Action_ViperGetOverHere(VisMgr.GetNodeOfType(VisMgr.BuildVisTree, class'X2Action_ViperGetOverHere'));
	GetOverHereAction.StartAnimName = 'NO_StranglePullStart';
	GetOverHereAction.StopAnimName = 'NO_StranglePullStop';
}


function bool PostAbilityMeleeDamagePreview(XComGameState_Ability AbilityState, StateObjectReference TargetRef, out WeaponDamageValue MinDamagePreview, out WeaponDamageValue MaxDamagePreview, out int AllowsShield)
{
	local XComGameState_Ability MeleeAbility;
	local XComGameState_Unit OwnerState;
	local XComGameStateHistory History;

	History = `XCOMHISTORY;
	OwnerState = XComGameState_Unit(History.GetGameStateForObjectID(AbilityState.OwnerStateObject.ObjectID));
	MeleeAbility = XComGameState_Ability(History.GetGameStateForObjectID(OwnerState.FindAbility('SkirmisherPostAbilityMelee').ObjectID));

	MeleeAbility.GetDamagePreview(TargetRef, MinDamagePreview, MaxDamagePreview, AllowsShield);
	return true;
}

static function X2AbilityTemplate ForwardOperator()
{
	local X2AbilityTemplate						Template;
	local X2Effect_ForwardOperator				OperatorEffect;

	`CREATE_X2ABILITY_TEMPLATE(Template, 'ForwardOperator');
//BEGIN AUTOGENERATED CODE: Template Overrides 'ForwardOperator'
	Template.IconImage = "img:///UILibrary_XPACK_Common.PerkIcons.UIPerk_ForwardOperator";
	Template.ActivationSpeech = 'ForwardOperator';
//END AUTOGENERATED CODE: Template Overrides 'ForwardOperator'

	Template.AbilitySourceName = 'eAbilitySource_Perk';
	Template.eAbilityIconBehaviorHUD = eAbilityIconBehavior_NeverShow;
	Template.Hostility = eHostility_Neutral;

	Template.AbilityToHitCalc = default.DeadEye;
	Template.AbilityTargetStyle = default.SelfTarget;
	Template.AbilityTriggers.AddItem(default.UnitPostBeginPlayTrigger);

	OperatorEffect = new class'X2Effect_ForwardOperator';
	OperatorEffect.BuildPersistentEffect(1, true, false, false);
	OperatorEffect.SetDisplayInfo(ePerkBuff_Passive, Template.LocFriendlyName, Template.LocLongDescription, Template.IconImage, true, , Template.AbilitySourceName);
	Template.AddTargetEffect(OperatorEffect);

	Template.BuildNewGameStateFn = TypicalAbility_BuildGameState;
	//  NOTE: No visualization on purpose!

	return Template;
}

static function X2AbilityTemplate ManualOverride()
{
	local X2AbilityTemplate					Template;
	local X2AbilityCost_ActionPoints        ActionPointCost;

	`CREATE_X2ABILITY_TEMPLATE(Template, 'ManualOverride');

	Template.IconImage = "img:///UILibrary_XPACK_Common.PerkIcons.UIPerk_ManualOverride";
	Template.AbilitySourceName = 'eAbilitySource_Perk';
	Template.eAbilityIconBehaviorHUD = eAbilityIconBehavior_AlwaysShow;
	Template.Hostility = eHostility_Neutral;

	Template.AbilityToHitCalc = default.DeadEye;
	Template.AbilityTargetStyle = default.SelfTarget;
	Template.AbilityTriggers.AddItem(default.PlayerInputTrigger);

	ActionPointCost = new class'X2AbilityCost_ActionPoints';
	ActionPointCost.iNumPoints = 1;
	ActionPointCost.bConsumeAllPoints = false;
	Template.AbilityCosts.AddItem(ActionPointCost);

	Template.AbilityShooterConditions.AddItem(new class'X2Condition_ManualOverride');
	Template.AbilityShooterConditions.AddItem(default.LivingShooterProperty);
	Template.AddShooterEffectExclusions();	

	Template.AddTargetEffect(new class'X2Effect_ManualOverride');

	Template.bSkipFireAction = true;
	Template.bShowActivation = true;
	Template.BuildNewGameStateFn = TypicalAbility_BuildGameState;
	Template.BuildVisualizationFn = TypicalAbility_BuildVisualization;
//BEGIN AUTOGENERATED CODE: Template Overrides 'ManualOverride'
	Template.AbilityConfirmSound = "Manual_Override_Activate";
	Template.ActivationSpeech = 'ManualOverride';
//END AUTOGENERATED CODE: Template Overrides 'ManualOverride'

	return Template;
}

static function X2AbilityTemplate ParkourPassive()
{
	local X2AbilityTemplate			Template;

	Template = PurePassive('ParkourPassive', "img:///UILibrary_XPACK_Common.PerkIcons.UIPerk_parkour");

	return Template;
}

static function X2AbilityTemplate Parkour()
{
	local X2AbilityTemplate						Template;
	local X2AbilityTrigger_EventListener		ActivationTrigger;
	local X2Effect_GrantActionPoints			AddActionPointsEffect;

	`CREATE_X2ABILITY_TEMPLATE(Template, 'Parkour');

//BEGIN AUTOGENERATED CODE: Template Overrides 'Parkour'
	Template.bFrameEvenWhenUnitIsHidden = true;
	Template.AbilitySourceName = 'eAbilitySource_Perk';
//END AUTOGENERATED CODE: Template Overrides 'Parkour'
	Template.eAbilityIconBehaviorHUD = eAbilityIconBehavior_NeverShow;
	Template.IconImage = "img:///UILibrary_XPACK_Common.PerkIcons.UIPerk_parkour";

	Template.Hostility = eHostility_Neutral;

	Template.AbilityToHitCalc = default.DeadEye;
	Template.AbilityTargetStyle = default.SelfTarget;

	ActivationTrigger = new class'X2AbilityTrigger_EventListener';
	ActivationTrigger.ListenerData.EventID = 'UnitMoveFinished';
	ActivationTrigger.ListenerData.EventFn = class'XComGameState_Ability'.static.ParkourActivation_EventListener;
	ActivationTrigger.ListenerData.Deferral = ELD_OnStateSubmitted;
	ActivationTrigger.ListenerData.Filter = eFilter_Unit;
	Template.AbilityTriggers.AddItem(ActivationTrigger);

	// grant an action point to ourself so that the move effectively becomes free
	AddActionPointsEffect = new class'X2Effect_GrantActionPoints';
	AddActionPointsEffect.PointType = class'X2CharacterTemplateManager'.default.StandardActionPoint;
	AddActionPointsEffect.NumActionPoints = default.NUM_PARKOUR_ACTION_POINTS;
	Template.AddShooterEffect(AddActionPointsEffect);

	Template.BuildNewGameStateFn = TypicalAbility_BuildGameState;
	Template.BuildVisualizationFn = Parkour_BuildVisualization;
	Template.AdditionalAbilities.AddItem('ParkourPassive');

	return Template;
}

static function Parkour_BuildVisualization(XComGameState VisualizeGameState)
{
	local XComGameState_Unit Unit;
	local VisualizationActionMetadata ActionMetadata;
	local XGParamTag Tag;
	local X2Action_PlaySoundAndFlyover FlyoverAction;
	local X2Action_UpdateUI UIUpdate;

	foreach VisualizeGameState.IterateByClassType( class'XComGameState_Unit', Unit )
	{
		break;
	}

	ActionMetadata.StateObject_OldState = Unit.GetPreviousVersion( );
	ActionMetadata.StateObject_NewState = Unit;

	Tag = XGParamTag(`XEXPANDCONTEXT.FindTag("XGParam"));
	Tag.IntValue0 = default.NUM_PARKOUR_ACTION_POINTS;

	FlyoverAction = X2Action_PlaySoundAndFlyover(class'X2Action_PlaySoundAndFlyover'.static.AddToVisualizationTree(ActionMetadata, VisualizeGameState.GetContext()));
	FlyoverAction.SetSoundAndFlyOverParameters(none, `XEXPAND.ExpandString( default.ParkourFlyoverText ), '', eColor_Good);

	UIUpdate = X2Action_UpdateUI( class'X2Action_UpdateUI'.static.AddToVisualizationTree( ActionMetadata, VisualizeGameState.GetContext(), , FlyoverAction ) );
	UIUpdate.UpdateType = EUIUT_UnitFlag_Moves;
	UIUpdate.SpecificID = Unit.ObjectID;
}

static function X2AbilityTemplate SkirmisherVengeance()
{
	local X2AbilityTemplate                 Template;
	local X2AbilityCost_ActionPoints        ActionPointCost;
	local X2AbilityCooldown                 Cooldown;
	local X2Condition_UnitProperty          UnitPropertyCondition;
	local X2Condition_UnblockedNeighborTile UnblockedNeighborTileCondition;
	local X2AbilityToHitCalc_StandardAim    StandardAim;
	local X2Effect_GetOverThere             GetOverThereEffect;
	local X2Effect_TriggerEvent				PostAbilityMelee;

	`CREATE_X2ABILITY_TEMPLATE(Template, 'SkirmisherVengeance');
	Template.IconImage = "img:///UILibrary_XPACK_Common.PerkIcons.UIPerk_Vengeance";

	Template.AbilitySourceName = 'eAbilitySource_Standard';
	Template.eAbilityIconBehaviorHUD = eAbilityIconBehavior_AlwaysShow;
	Template.Hostility = eHostility_Offensive;

	ActionPointCost = new class'X2AbilityCost_ActionPoints';
	ActionPointCost.iNumPoints = 1;
	ActionPointCost.bConsumeAllPoints = false;
	Template.AbilityCosts.AddItem(ActionPointCost);

	Cooldown = New class'X2AbilityCooldown';
	Cooldown.iNumTurns = 5;
	Template.AbilityCooldown = Cooldown;

	Template.AbilityShooterConditions.AddItem(default.LivingShooterProperty);
	Template.AddShooterEffectExclusions();

	// There must be a free tile around the source unit
	UnblockedNeighborTileCondition = new class'X2Condition_UnblockedNeighborTile';
	Template.AbilityTargetConditions.AddItem(UnblockedNeighborTileCondition);

	// The Target must be alive and a humanoid
	UnitPropertyCondition = new class'X2Condition_UnitProperty';
	UnitPropertyCondition.ExcludeDead = true;
	UnitPropertyCondition.ExcludeRobotic = false;
	UnitPropertyCondition.ExcludeAlien = false;
	UnitPropertyCondition.ExcludeFriendlyToSource = true;
	UnitPropertyCondition.RequireWithinMinRange = true;

	/// HL-Docs: ref:Bugfixes; issue:1293
	/// Allow Wrath to target enemies Mind Controlled by XCOM
	UnitPropertyCondition.TreatMindControlledSquadmateAsHostile = true;

	Template.AbilityTargetConditions.AddItem(UnitPropertyCondition);

	Template.AbilityTargetConditions.AddItem(default.GameplayVisibilityCondition);
	Template.AbilityTargetConditions.AddItem(new class'X2Condition_Wrath');

	Template.AbilityTargetStyle = new class'X2AbilityTarget_Single';
	Template.AbilityTriggers.AddItem(default.PlayerInputTrigger);

	// This will attack using the standard aim
	StandardAim = new class'X2AbilityToHitCalc_StandardAim';
	StandardAim.BuiltInHitMod = default.WRATH_HIT_BONUS;
	StandardAim.bAllowCrit = false;
	Template.AbilityToHitCalc = StandardAim;

	GetOverThereEffect = new class'X2Effect_GetOverThere';
	Template.AddTargetEffect(GetOverThereEffect);

	PostAbilityMelee = new class'X2Effect_TriggerEvent';
	PostAbilityMelee.TriggerEventName = 'ActivateSkirmisherMelee';
	Template.AddTargetEffect(PostAbilityMelee);
	Template.AdditionalAbilities.AddItem('SkirmisherPostAbilityMelee');

	Template.BuildNewGameStateFn = TypicalAbility_BuildGameState;
	Template.BuildVisualizationFn = Vengeance_BuildVisualization;
	Template.BuildInterruptGameStateFn = TypicalAbility_BuildInterruptGameState;
	Template.Hostility = eHostility_Offensive;
	Template.bSkipFireAction = true;
	Template.DamagePreviewFn = PostAbilityMeleeDamagePreview;
//BEGIN AUTOGENERATED CODE: Template Overrides 'SkirmisherVengeance'
	Template.bFrameEvenWhenUnitIsHidden = true;
	Template.ActivationSpeech = 'Vengeance';
	Template.CinescriptCameraType = "Soldier_Grapple";
	Template.CustomFireAnim = 'NO_GrappleFire';
//END AUTOGENERATED CODE: Template Overrides 'SkirmisherVengeance'

	return Template;
}

simulated function Vengeance_BuildVisualization(XComGameState VisualizeGameState)
{
	local XComGameStateHistory History;
	local StateObjectReference MovingUnitRef;
	local VisualizationActionMetadata ActionMetadata;
	local VisualizationActionMetadata EmptyTrack;
	local XComGameStateContext_Ability AbilityContext;
	local XComGameState_EnvironmentDamage EnvironmentDamage;
	local X2Action_PlaySoundAndFlyOver CharSpeechAction;
	local X2Action_Grapple GrappleAction;
	local X2Action_ExitCover ExitCoverAction;
	local X2Action_Fire FireMissAction;

	History = `XCOMHISTORY;
	AbilityContext = XComGameStateContext_Ability(VisualizeGameState.GetContext());

	MovingUnitRef = AbilityContext.InputContext.SourceObject;

	ActionMetadata.StateObject_OldState = History.GetGameStateForObjectID(MovingUnitRef.ObjectID, eReturnType_Reference, VisualizeGameState.HistoryIndex - 1);
	ActionMetadata.StateObject_NewState = VisualizeGameState.GetGameStateForObjectID(MovingUnitRef.ObjectID);
	ActionMetadata.VisualizeActor = History.GetVisualizer(MovingUnitRef.ObjectID);

	ExitCoverAction = X2Action_ExitCover(class'X2Action_ExitCover'.static.AddToVisualizationTree(ActionMetadata, AbilityContext));
	ExitCoverAction.bUsePreviousGameState = true;

	if (!AbilityContext.IsResultContextMiss())
	{
		CharSpeechAction = X2Action_PlaySoundAndFlyOver(class'X2Action_PlaySoundAndFlyOver'.static.AddToVisualizationTree(ActionMetadata, AbilityContext));
		CharSpeechAction.SetSoundAndFlyOverParameters(None, "", 'GrapplingHook', eColor_Good);

		GrappleAction = X2Action_Grapple(class'X2Action_Grapple'.static.AddToVisualizationTree(ActionMetadata, AbilityContext));
		GrappleAction.DesiredLocation = `XWORLD.GetPositionFromTileCoordinates(XComGameState_Unit(ActionMetadata.StateObject_NewState).TileLocation);

		// destroy any windows we flew through
		foreach VisualizeGameState.IterateByClassType(class'XComGameState_EnvironmentDamage', EnvironmentDamage)
		{
			ActionMetadata = EmptyTrack;

			//Don't necessarily have a previous state, so just use the one we know about
			ActionMetadata.StateObject_OldState = EnvironmentDamage;
			ActionMetadata.StateObject_NewState = EnvironmentDamage;
			ActionMetadata.VisualizeActor = History.GetVisualizer(EnvironmentDamage.ObjectID);

			class'X2Action_WaitForAbilityEffect'.static.AddToVisualizationTree(ActionMetadata, VisualizeGameState.GetContext(), false, ActionMetadata.LastActionAdded);
			class'X2Action_ApplyWeaponDamageToTerrain'.static.AddToVisualizationTree(ActionMetadata, VisualizeGameState.GetContext());
		}
	}
	else
	{
		FireMissAction = X2Action_Fire(class'X2Action_Fire'.static.AddToVisualizationTree(ActionMetadata, AbilityContext, false, ExitCoverAction));
		class'X2Action_EnterCover'.static.AddToVisualizationTree(ActionMetadata, AbilityContext, false, FireMissAction);
	}

}

static function X2AbilityTemplate Whiplash()
{
	local X2AbilityTemplate                 Template;
	local X2Condition_UnitProperty          UnitPropertyCondition;
	local X2AbilityToHitCalc_StandardAim    StandardAim;
	local X2Effect_ApplyWeaponDamage		WeaponDamageEffect;
	local X2AbilityCharges					Charges;
	local X2AbilityCost_Charges				ChargeCost;

	`CREATE_X2ABILITY_TEMPLATE(Template, 'Whiplash');
	Template.IconImage = "img:///UILibrary_XPACK_Common.PerkIcons.UIPerk_Whiplash";

	Template.AbilitySourceName = 'eAbilitySource_Perk';
	Template.eAbilityIconBehaviorHUD = eAbilityIconBehavior_AlwaysShow;
	Template.Hostility = eHostility_Offensive;

	Charges = new class'X2AbilityCharges';
	Charges.InitialCharges = default.WHIPLASH_CHARGES;
	Template.AbilityCharges = Charges;

	ChargeCost = new class'X2AbilityCost_Charges';
	ChargeCost.NumCharges = 1;
	Template.AbilityCosts.AddItem(ChargeCost);

	Template.AbilityCosts.AddItem(default.FreeActionCost);

	Template.AbilityShooterConditions.AddItem(default.LivingShooterProperty);
	Template.AddShooterEffectExclusions();

	UnitPropertyCondition = new class'X2Condition_UnitProperty';

	/// HL-Docs: ref:Bugfixes; issue:1293
	/// Allow Whiplash to target enemies Mind Controlled by XCOM
	UnitPropertyCondition.TreatMindControlledSquadmateAsHostile = true;

	Template.AbilityTargetConditions.AddItem(UnitPropertyCondition);

	Template.AbilityTargetConditions.AddItem(default.GameplayVisibilityCondition);

	Template.AbilityTargetStyle = new class'X2AbilityTarget_Single';
	Template.AbilityTriggers.AddItem(default.PlayerInputTrigger);

	// This will attack using the standard aim
	StandardAim = new class'X2AbilityToHitCalc_StandardAim';
	Template.AbilityToHitCalc = StandardAim;

	WeaponDamageEffect = new class'X2Effect_ApplyWeaponDamage';
	WeaponDamageEffect.EffectDamageValue = default.WHIPLASH_BASEDAMAGE;

	Template.AddTargetEffect(WeaponDamageEffect);

	// Jwats: Double damage for robotic
	WeaponDamageEffect = new class'X2Effect_ApplyWeaponDamage';
	WeaponDamageEffect.bIgnoreArmor = true;		//	armor was applied the first time, don't let it be applied the second time as well -jbouscher
	WeaponDamageEffect.EffectDamageValue = default.WHIPLASH_BASEDAMAGE;
	UnitPropertyCondition = new class'X2Condition_UnitProperty';
	UnitPropertyCondition.ExcludeRobotic = false;
	UnitPropertyCondition.ExcludeOrganic = true;

	/// HL-Docs: ref:Bugfixes; issue:1293
	/// Make enemies Mind Controlled by XCOM eligible for Whiplash's bonus damage
	UnitPropertyCondition.TreatMindControlledSquadmateAsHostile = true;

	WeaponDamageEffect.TargetConditions.AddItem(UnitPropertyCondition);
	Template.AddTargetEffect(WeaponDamageEffect);

	Template.BuildNewGameStateFn = TypicalAbility_BuildGameState;
	Template.BuildVisualizationFn = TypicalAbility_BuildVisualization;
	Template.BuildInterruptGameStateFn = TypicalAbility_BuildInterruptGameState;
	Template.CustomFireAnim = 'HL_Whiplash';
//BEGIN AUTOGENERATED CODE: Template Overrides 'Whiplash'
	Template.bFrameEvenWhenUnitIsHidden = true;
	Template.ActivationSpeech = 'Whiplash';
//END AUTOGENERATED CODE: Template Overrides 'Whiplash'

	return Template;
}

static function X2AbilityTemplate Judgment()
{
	local X2AbilityTemplate						Template;
	local X2Effect_CoveringFire                 CoveringEffect;

	Template = PurePassive('Judgment', "img:///UILibrary_XPACK_Common.PerkIcons.UIPerk_Judgment", false, 'eAbilitySource_Perk', true);
	Template.RemoveTemplateAvailablility(Template.BITFIELD_GAMEAREA_Multiplayer);

	CoveringEffect = new class'X2Effect_CoveringFire';
	CoveringEffect.BuildPersistentEffect(1, true, false, false);
	CoveringEffect.AbilityToActivate = 'JudgmentTrigger';
	CoveringEffect.GrantActionPoint = 'Judgment';
	CoveringEffect.bPreEmptiveFire = false;
	CoveringEffect.bDirectAttackOnly = true;
	CoveringEffect.bOnlyDuringEnemyTurn = true;
	CoveringEffect.bUseMultiTargets = false;
	CoveringEffect.EffectName = 'JudgmentWatchEffect';
	Template.AddTargetEffect(CoveringEffect);

	Template.AdditionalAbilities.AddItem('JudgmentTrigger');

	return Template;
}

static function X2AbilityTemplate JudgmentTrigger()
{
	local X2AbilityTemplate						Template;
	local X2Effect_Panicked						PanicEffect;
	local X2AbilityCost_ReserveActionPoints     ActionPointCost;
	local X2Condition_UnitProperty				TargetCondition;

	`CREATE_X2ABILITY_TEMPLATE(Template, 'JudgmentTrigger');
	Template.RemoveTemplateAvailablility(Template.BITFIELD_GAMEAREA_Multiplayer);

	Template.IconImage = "img:///UILibrary_XPACK_Common.PerkIcons.UIPerk_Judgment";
	Template.AbilitySourceName = 'eAbilitySource_Perk';
	Template.eAbilityIconBehaviorHUD = eAbilityIconBehavior_NeverShow;
	Template.Hostility = eHostility_Offensive;

	ActionPointCost = new class'X2AbilityCost_ReserveActionPoints';
	ActionPointCost.iNumPoints = 1;
	ActionPointCost.AllowedTypes.Length = 0;
	ActionPointCost.AllowedTypes.AddItem('Judgment');
	Template.AbilityCosts.AddItem(ActionPointCost);

	Template.AbilityShooterConditions.AddItem(default.LivingShooterProperty);
	Template.AddShooterEffectExclusions();

	Template.AbilityToHitCalc = default.DeadEye;                //  the real roll is in the effect apply chance
	Template.AbilityTargetStyle = default.SelfTarget;

	Template.AbilityTriggers.AddItem(new class'X2AbilityTrigger_Placeholder');

	TargetCondition = new class'X2Condition_UnitProperty';
	TargetCondition.ExcludeAlive = false;
	TargetCondition.ExcludeDead = true;
	TargetCondition.ExcludeFriendlyToSource = true;
	TargetCondition.ExcludeHostileToSource = false;
	TargetCondition.TreatMindControlledSquadmateAsHostile = false;
	TargetCondition.FailOnNonUnits = true;
	TargetCondition.ExcludeRobotic = true;
	Template.AbilityTargetConditions.AddItem(TargetCondition);

	PanicEffect = class'X2StatusEffects'.static.CreatePanickedStatusEffect();
	PanicEffect.ApplyChanceFn = JudgmentApplyChance;
	PanicEffect.VisualizationFn = Judgment_Visualization;
	Template.AddTargetEffect(PanicEffect);

	Template.CustomFireAnim = 'HL_Judgment';
	Template.bShowActivation = true;
	Template.CinescriptCameraType = "Skirmisher_Judgment";

	Template.BuildNewGameStateFn = TypicalAbility_BuildGameState;
	Template.BuildVisualizationFn = TypicalAbility_BuildVisualization;

	//BEGIN AUTOGENERATED CODE: Template Overrides 'JudgmentTrigger'
	Template.bFrameEvenWhenUnitIsHidden = true;
	Template.ActivationSpeech = 'Judgement';
	Template.CinescriptCameraType = "Skirmisher_Judgment";
	//END AUTOGENERATED CODE: Template Overrides 'JudgmentTrigger'

	return Template;
}

function name JudgmentApplyChance(const out EffectAppliedData ApplyEffectParameters, XComGameState_BaseObject kNewTargetState, XComGameState NewGameState)
{
	//  this mimics the panic hit roll without actually BEING the panic hit roll
	local XComGameState_Unit TargetUnit;
	local name ImmuneName;
	local int AttackVal, DefendVal, TargetRoll, RandRoll;

	TargetUnit = XComGameState_Unit(kNewTargetState);
	if( TargetUnit != none )
	{
		foreach class'X2AbilityToHitCalc_PanicCheck'.default.PanicImmunityAbilities(ImmuneName)
		{
			if( TargetUnit.FindAbility(ImmuneName).ObjectID != 0 )
			{
				return 'AA_UnitIsImmune';
			}
		}

		AttackVal = default.JUDGMENT_APPLYCHANCEATTACKVAL;
		DefendVal = TargetUnit.GetCurrentStat(eStat_Will);
		TargetRoll = class'X2AbilityToHitCalc_PanicCheck'.default.BaseValue + AttackVal - DefendVal;
		TargetRoll = Clamp(TargetRoll, default.JUDGMENT_MINCHANCE, default.JUDGMENT_MAXCHANCE);
		RandRoll = `SYNC_RAND(100);
		if( RandRoll < TargetRoll )
			return 'AA_Success';
	}

	return 'AA_EffectChanceFailed';
}

static function Judgment_Visualization(XComGameState VisualizeGameState, out VisualizationActionMetadata ActionMetadata, const name EffectApplyResult)
{
	local XComGameState_Unit UnitState;
	local XComGameStateContext_Ability Context;
	local X2AbilityTemplate	AbilityTemplate;

	if( EffectApplyResult != 'AA_Success' )
	{
		// pan to the not panicking unit (but only if it isn't a civilian)
		Context = XComGameStateContext_Ability(VisualizeGameState.GetContext());
		UnitState = XComGameState_Unit(ActionMetadata.StateObject_NewState);
		if( (UnitState == none) || (Context == none) )
		{
			return;
		}

		AbilityTemplate = class'XComGameState_Ability'.static.GetMyTemplateManager().FindAbilityTemplate(Context.InputContext.AbilityTemplateName);

		class'X2StatusEffects'.static.AddEffectCameraPanToAffectedUnitToTrack(ActionMetadata, VisualizeGameState.GetContext());
		class'X2StatusEffects'.static.AddEffectSoundAndFlyOverToTrack(ActionMetadata, VisualizeGameState.GetContext(), AbilityTemplate.LocMissMessage, '', eColor_Good, class'UIUtilities_Image'.const.UnitStatus_Panicked);
	}
}

static function X2AbilityTemplate SkirmisherInterruptInput()
{
	local X2AbilityTemplate					Template;
	local X2AbilityCost_ActionPoints        ActionPointCost;
	local X2Effect_ReserveOverwatchPoints   ReserveActionPointsEffect;
	local array<name>                       SkipExclusions;
	local X2Condition_UnitProperty          ConcealedCondition;
	local X2Effect_SetUnitValue             UnitValueEffect;
	local X2Condition_UnitEffects           SuppressedCondition;
	local X2AbilityCharges					Charges;
	local X2AbilityCost_Charges				ChargeCost;

	`CREATE_X2ABILITY_TEMPLATE(Template, 'SkirmisherInterruptInput');

	Charges = new class'X2AbilityCharges';
	Charges.InitialCharges = default.INTERRUPT_CHARGES;
	Template.AbilityCharges = Charges;

	ChargeCost = new class'X2AbilityCost_Charges';
	ChargeCost.NumCharges = 1;
	Template.AbilityCosts.AddItem(ChargeCost);

	ActionPointCost = new class'X2AbilityCost_ActionPoints';
	ActionPointCost.bConsumeAllPoints = true;   //  this will guarantee the unit has at least 1 action point
	ActionPointCost.bFreeCost = true;           //  ReserveActionPoints effect will take all action points away
	ActionPointCost.DoNotConsumeAllEffects.Length = 0;
	ActionPointCost.DoNotConsumeAllSoldierAbilities.Length = 0;
	ActionPointCost.AllowedTypes.RemoveItem(class'X2CharacterTemplateManager'.default.SkirmisherInterruptActionPoint);
	Template.AbilityCosts.AddItem(ActionPointCost);

	Template.AbilityShooterConditions.AddItem(default.LivingShooterProperty);

	SkipExclusions.AddItem(class'X2AbilityTemplateManager'.default.DisorientedName);
	Template.AddShooterEffectExclusions(SkipExclusions);

	SuppressedCondition = new class'X2Condition_UnitEffects';
	SuppressedCondition.AddExcludeEffect(class'X2Effect_Suppression'.default.EffectName, 'AA_UnitIsSuppressed');
	SuppressedCondition.AddExcludeEffect(class'X2Effect_SkirmisherInterrupt'.default.EffectName, 'AA_AbilityUnavailable');
	Template.AbilityShooterConditions.AddItem(SuppressedCondition);

	ReserveActionPointsEffect = new class'X2Effect_ReserveOverwatchPoints';
	ReserveActionPointsEffect.UseAllPointsWithAbilities.Length = 0;
	ReserveActionPointsEffect.ReserveType = 'ReserveInterrupt';
	Template.AddTargetEffect(ReserveActionPointsEffect);

	ConcealedCondition = new class'X2Condition_UnitProperty';
	ConcealedCondition.ExcludeFriendlyToSource = false;
	ConcealedCondition.IsConcealed = true;
	UnitValueEffect = new class'X2Effect_SetUnitValue';
	UnitValueEffect.UnitName = class'X2Ability_DefaultAbilitySet'.default.ConcealedOverwatchTurn;
	UnitValueEffect.CleanupType = eCleanup_BeginTurn;
	UnitValueEffect.NewValueToSet = 1;
	UnitValueEffect.TargetConditions.AddItem(ConcealedCondition);
	Template.AddTargetEffect(UnitValueEffect);

	Template.AbilityToHitCalc = default.DeadEye;
	Template.AbilityTargetStyle = default.SelfTarget;
	Template.AbilityTriggers.AddItem(default.PlayerInputTrigger);

	Template.AbilitySourceName = 'eAbilitySource_Perk';
	Template.eAbilityIconBehaviorHUD = eAbilityIconBehavior_AlwaysShow;
	Template.IconImage = "img:///UILibrary_XPACK_Common.PerkIcons.UIPerk_Interrupt";
	Template.ShotHUDPriority = class'UIUtilities_Tactical'.const.OVERWATCH_PRIORITY;
	Template.bDisplayInUITooltip = false;
	Template.bDisplayInUITacticalText = false;
	Template.AbilityConfirmSound = "Unreal2DSounds_OverWatch";

	Template.BuildNewGameStateFn = TypicalAbility_BuildGameState;
	Template.BuildVisualizationFn = TypicalAbility_BuildVisualization;
	Template.bSkipFireAction = true;
	Template.bShowActivation = true;
	Template.CinescriptCameraType = "Overwatch";

	Template.Hostility = eHostility_Defensive;

	Template.ChosenActivationIncreasePerUse = class'X2AbilityTemplateManager'.default.NonAggressiveChosenActivationIncreasePerUse;

	return Template;
}

static function X2AbilityTemplate SkirmisherInterrupt()
{
	local X2AbilityTemplate                 Template;
	local X2AbilityCost_ReserveActionPoints ReserveActionPointCost;
	local X2Condition_UnitProperty          ShooterCondition;
	local X2AbilityTarget_Single            SingleTarget;
	local X2AbilityTrigger_EventListener	Trigger;
	local X2Condition_Visibility			TargetVisibilityCondition;
	local array<name>                       SkipExclusions;
	local X2Effect_SkirmisherInterrupt		InterruptEffect;
	local X2Condition_UnitEffects			EffectCondition;

	`CREATE_X2ABILITY_TEMPLATE(Template, 'SkirmisherInterrupt');

	Template.AdditionalAbilities.AddItem('SkirmisherInterruptInput');
	Template.bUniqueSource = true;

	ReserveActionPointCost = new class'X2AbilityCost_ReserveActionPoints';
	ReserveActionPointCost.iNumPoints = 1;
	ReserveActionPointCost.AllowedTypes.AddItem('ReserveInterrupt');
	Template.AbilityCosts.AddItem(ReserveActionPointCost);

	Template.AbilityToHitCalc = default.DeadEye;

	Template.AbilityTargetConditions.AddItem(default.LivingHostileUnitDisallowMindControlProperty);

	TargetVisibilityCondition = new class'X2Condition_Visibility';
	TargetVisibilityCondition.bRequireGameplayVisible = true;
	TargetVisibilityCondition.bRequireBasicVisibility = true;
	TargetVisibilityCondition.bDisablePeeksOnMovement = true; //Don't use peek tiles for over watch shots	
	Template.AbilityTargetConditions.AddItem(TargetVisibilityCondition);

	Template.AbilityTargetConditions.AddItem(new class'X2Condition_EverVigilant');
	Template.AbilityTargetConditions.AddItem(class'X2Ability_DefaultAbilitySet'.static.OverwatchTargetEffectsCondition());

	Template.AbilityShooterConditions.AddItem(default.LivingShooterProperty);
	ShooterCondition = new class'X2Condition_UnitProperty';
	ShooterCondition.ExcludeConcealed = true;
	Template.AbilityShooterConditions.AddItem(ShooterCondition);

	EffectCondition = new class'X2Condition_UnitEffects';
	EffectCondition.AddExcludeEffect(class'X2Effect_SkirmisherInterrupt'.default.EffectName, 'AA_UnitIsImmune');
	Template.AbilityShooterConditions.AddItem(EffectCondition);

	SkipExclusions.AddItem(class'X2AbilityTemplateManager'.default.DisorientedName);
	Template.AddShooterEffectExclusions(SkipExclusions);

	SingleTarget = new class'X2AbilityTarget_Single';
	SingleTarget.OnlyIncludeTargetsInsideWeaponRange = true;
	Template.AbilityTargetStyle = SingleTarget;

	//Trigger on movement - interrupt the move
	Trigger = new class'X2AbilityTrigger_EventListener';
	Trigger.ListenerData.EventID = 'ObjectMoved';
	Trigger.ListenerData.Deferral = ELD_OnStateSubmitted;
	Trigger.ListenerData.Filter = eFilter_None;
	Trigger.ListenerData.EventFn = class'XComGameState_Ability'.static.SkirmisherInterruptListener;
	Template.AbilityTriggers.AddItem(Trigger);

	Template.AbilitySourceName = 'eAbilitySource_Standard';
	Template.eAbilityIconBehaviorHUD = eAbilityIconBehavior_NeverShow;
	Template.IconImage = "img:///UILibrary_XPACK_Common.PerkIcons.UIPerk_Interrupt";
	Template.ShotHUDPriority = class'UIUtilities_Tactical'.const.OVERWATCH_PRIORITY;
	Template.bDisplayInUITooltip = false;
	Template.bDisplayInUITacticalText = false;
	Template.DisplayTargetHitChance = false;

	InterruptEffect = new class'X2Effect_SkirmisherInterrupt';
	InterruptEffect.BuildPersistentEffect(1, false, , , eGameRule_PlayerTurnBegin);
	Template.AddShooterEffect(InterruptEffect);

	Template.BuildNewGameStateFn = TypicalAbility_BuildGameState;
	Template.BuildVisualizationFn = TypicalAbility_BuildVisualization;
	Template.bSkipFireAction = true;
	Template.bShowActivation = true;
//BEGIN AUTOGENERATED CODE: Template Overrides 'SkirmisherInterrupt'
	Template.bFrameEvenWhenUnitIsHidden = true;
	Template.ActivationSpeech = 'Interrupt';
//END AUTOGENERATED CODE: Template Overrides 'SkirmisherInterrupt'

	return Template;
}

static function X2AbilityTemplate Battlelord()
{
	local X2AbilityTemplate				Template;
	local X2AbilityCharges				Charges;
	local X2AbilityCost_Charges			ChargeCost;
	local X2AbilityCost_ActionPoints	ActionPointCost;
	local X2Effect_Battlelord			BattlelordEffect;

	`CREATE_X2ABILITY_TEMPLATE(Template, 'Battlelord');

	Template.IconImage = "img:///UILibrary_XPACK_Common.PerkIcons.UIPerk_Battlelord";
	Template.AbilitySourceName = 'eAbilitySource_Perk';
	Template.eAbilityIconBehaviorHUD = eAbilityIconBehavior_AlwaysShow;
	Template.Hostility = eHostility_Neutral;

	Template.AbilityToHitCalc = default.DeadEye;
	Template.AbilityTargetStyle = default.SelfTarget;
	Template.AbilityTriggers.AddItem(default.PlayerInputTrigger);

	Charges = new class'X2AbilityCharges';
	Charges.InitialCharges = 1;
	Template.AbilityCharges = Charges;

	ChargeCost = new class'X2AbilityCost_Charges';
	ChargeCost.NumCharges = 1;
	Template.AbilityCosts.AddItem(ChargeCost);

	ActionPointCost = new class'X2AbilityCost_ActionPoints';
	ActionPointCost.iNumPoints = 1;
	ActionPointCost.bConsumeAllPoints = true;
	ActionPointCost.AllowedTypes.RemoveItem(class'X2CharacterTemplateManager'.default.SkirmisherInterruptActionPoint);
	Template.AbilityCosts.AddItem(ActionPointCost);

	BattlelordEffect = new class'X2Effect_Battlelord';
	BattlelordEffect.BuildPersistentEffect(1, false, , , eGameRule_PlayerTurnBegin);
	BattlelordEffect.SetDisplayInfo(ePerkBuff_Bonus, Template.LocFriendlyName, Template.LocLongDescription, Template.IconImage, true, , Template.AbilitySourceName);
	Template.AddTargetEffect(BattlelordEffect);

	Template.AbilityShooterConditions.AddItem(default.LivingShooterProperty);
	Template.AddShooterEffectExclusions();

	Template.BuildNewGameStateFn = TypicalAbility_BuildGameState;
	Template.BuildVisualizationFn = TypicalAbility_BuildVisualization;
	Template.bSkipFireAction = true;
	Template.bShowActivation = true;
//BEGIN AUTOGENERATED CODE: Template Overrides 'Battlelord'
	Template.AbilityConfirmSound = "Battlelord_Activate";
	Template.ActivationSpeech = 'Battlelord';
//END AUTOGENERATED CODE: Template Overrides 'Battlelord'

	return Template;
}

static function X2AbilityTemplate SkirmisherReturnFire()
{
	local X2AbilityTemplate                 Template;

	Template = class'X2Ability_SharpshooterAbilitySet'.static.ReturnFire('SkirmisherReturnFire');

	return Template;
}
