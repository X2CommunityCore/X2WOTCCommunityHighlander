//---------------------------------------------------------------------------------------
//  Copyright (c) 2016 Firaxis Games, Inc. All rights reserved.
//---------------------------------------------------------------------------------------
class X2Ability_TheLost extends X2Ability
	config(GameData_SoldierSkills);

var config float LOST_BURNING_DMG_MULTIPLIER;
var config int LOST_HOWLER_SOUND_MAGNITUDE;
var config int LOSTHOWLER_LOCAL_COOLDOWN;
var config int LOSTHOWLER_GLOBAL_COOLDOWN;

var localized string FireVulnerabilityFriendlyName;
var localized string FireVulnerabilityFriendlyDesc;

static function array<X2DataTemplate> CreateTemplates()
{
	local array<X2DataTemplate> Templates;
	
	Templates.AddItem(CreateLostHeadshotInit());
	Templates.AddItem(CreateLostAttack());
	Templates.AddItem(CreateLostHowlerAbility());
	Templates.AddItem(CreateLostCatchingFireAbility());
	
	return Templates;
}

static function X2DataTemplate CreateLostAttack()
{
	local X2AbilityTemplate Template;
	local X2AbilityCost_ActionPoints ActionPointCost;
	local X2Effect_ApplyWeaponDamage PhysicalDamageEffect;

	`CREATE_X2ABILITY_TEMPLATE(Template, 'LostAttack');
	Template.IconImage = "img:///UILibrary_PerkIcons.UIPerk_escape";
	Template.Hostility = eHostility_Offensive;
	Template.AbilitySourceName = 'eAbilitySource_Standard';
	Template.eAbilityIconBehaviorHUD = eAbilityIconBehavior_AlwaysShow;

	ActionPointCost = new class'X2AbilityCost_ActionPoints';
	ActionPointCost.iNumPoints = 1;
	ActionPointCost.bConsumeAllPoints = true;
	Template.AbilityCosts.AddItem(ActionPointCost);

	Template.AbilityToHitCalc = new class'X2AbilityToHitCalc_StandardMelee';
	Template.AbilityTargetStyle = default.SimpleSingleMeleeTarget;

	Template.AbilityTriggers.AddItem(default.PlayerInputTrigger);

	Template.AbilityShooterConditions.AddItem(default.LivingShooterProperty);

	Template.AbilityTargetConditions.AddItem(default.LivingHostileTargetProperty);
	Template.AbilityTargetConditions.AddItem(default.GameplayVisibilityCondition);

	PhysicalDamageEffect = new class'X2Effect_ApplyWeaponDamage';
	Template.AddTargetEffect(PhysicalDamageEffect);

	Template.BuildNewGameStateFn = TypicalAbility_BuildGameState;
	Template.BuildVisualizationFn = TypicalAbility_BuildVisualization;
	Template.MergeVisualizationFn = LostAttack_MergeVisualization;
	Template.BuildInterruptGameStateFn = TypicalAbility_BuildInterruptGameState;
	Template.CustomFireAnim = 'FF_Melee';

	Template.CinescriptCameraType = "Lost_Attack";
//BEGIN AUTOGENERATED CODE: Template Overrides 'LostAttack'
	Template.bFrameEvenWhenUnitIsHidden = true;
//END AUTOGENERATED CODE: Template Overrides 'LostAttack'
	
	return Template;
}

simulated function LostAttack_MergeVisualization(X2Action BuildTree, out X2Action VisualizationTree)
{
	local XComGameStateContext_Ability MyAbilityContext;
	local XComGameStateContext_Ability TestAbilityContext;
	local XComGameStateVisualizationMgr VisMgr;
	local X2Action_ExitCover MyExitCover;
	local X2Action_Fire MyFireAction;
	local Array<X2Action> TestActions;
	local X2Action_ExitCover DrivingExitCover;
	local X2Action_Fire DrivingFireAction;
	local int ActionIndex;
	local bool bMergedAlready;
	local XComGameState_Unit TargetGameState;
	local int DamageResultIndex;
	local X2Action_ApplyWeaponDamageToUnit DrivingApplyWeaponDamageToUnit;
	local X2Action TestMarkerAction;
	local X2Action_MarkerNamed CameraReplaceAction;

	VisMgr = `XCOMVISUALIZATIONMGR;

	MyAbilityContext = XComGameStateContext_Ability(BuildTree.StateChangeContext);
	if( MyAbilityContext.bSkipAdditionalVisualizationSteps )
	{
		// we only need one LookAt, so replace all the others with filler
		if( VisualizationTree != None )
		{
			VisMgr.GetNodesOfType(BuildTree, class'X2Action_CameraLookAt', TestActions);
			foreach TestActions(TestMarkerAction)
			{
				CameraReplaceAction = X2Action_MarkerNamed(class'X2Action_MarkerNamed'.static.CreateVisualizationAction(MyAbilityContext));
				CameraReplaceAction.SetName("LostAttackCameraLookAtReplacement");
				VisMgr.ReplaceNode(CameraReplaceAction, TestMarkerAction);
			}
		}

		MyExitCover = X2Action_ExitCover(VisMgr.GetNodeOfType(BuildTree, class'X2Action_ExitCover', , MyAbilityContext.InputContext.SourceObject.ObjectID));
		MyFireAction = X2Action_Fire(VisMgr.GetNodeOfType(BuildTree, class'X2Action_Fire', , MyAbilityContext.InputContext.SourceObject.ObjectID));
		
		// Jwats: Line up the Exit Covers
		VisMgr.GetNodesOfType(VisualizationTree, class'X2Action_ExitCover', TestActions);
		for( ActionIndex = 0; ActionIndex < TestActions.Length; ++ActionIndex )
		{
			TestAbilityContext = XComGameStateContext_Ability(TestActions[ActionIndex].StateChangeContext);
			if( TestAbilityContext != None && !TestAbilityContext.bSkipAdditionalVisualizationSteps )
			{
				DrivingExitCover = X2Action_ExitCover(TestActions[ActionIndex]);
				VisMgr.DisconnectAction(MyExitCover);
				VisMgr.ConnectAction(MyExitCover, VisualizationTree, false, None, TestActions[ActionIndex].ParentActions);
				bMergedAlready = true;
				break;
			}
		}

		// Jwats: Find the driving fire action
		VisMgr.GetNodesOfType(VisualizationTree, class'X2Action_Fire', TestActions);
		for( ActionIndex = 0; ActionIndex < TestActions.Length; ++ActionIndex )
		{
			TestAbilityContext = XComGameStateContext_Ability(TestActions[ActionIndex].StateChangeContext);
			if( TestAbilityContext != None && !TestAbilityContext.bSkipAdditionalVisualizationSteps )
			{
				DrivingFireAction = X2Action_Fire(TestActions[ActionIndex]);
				break;
			}
		}

		// Jwats: Now Make sure both fires wait for both exit covers
		TestActions.Length = 0;
		TestActions.AddItem(MyExitCover);
		TestActions.AddItem(DrivingExitCover);
		VisMgr.ConnectAction(MyFireAction, VisualizationTree, false, , TestActions);
		VisMgr.ConnectAction(DrivingFireAction, VisualizationTree, false, , TestActions);

		// bsg-blittrell: Find the driving "X2Action_ApplyWeaponDamageToUnit", and add our damage to it
		VisMgr.GetNodesOfType(VisualizationTree, class'X2Action_ApplyWeaponDamageToUnit', TestActions);
		TargetGameState = XComGameState_Unit(`XCOMHISTORY.GetGameStateForObjectID(MyAbilityContext.InputContext.PrimaryTarget.ObjectID));
		for( ActionIndex = 0; ActionIndex < TestActions.Length; ++ActionIndex )
		{
			TestAbilityContext = XComGameStateContext_Ability(TestActions[ActionIndex].StateChangeContext);
			if( TestAbilityContext != None && !TestAbilityContext.bSkipAdditionalVisualizationSteps )
			{
				DrivingApplyWeaponDamageToUnit = X2Action_ApplyWeaponDamageToUnit(TestActions[ActionIndex]);				

				for(DamageResultIndex = 0; DamageResultIndex < TargetGameState.DamageResults.Length; ++DamageResultIndex)
				{
					if( TargetGameState.DamageResults[DamageResultIndex].Context != MyAbilityContext )
					{
						// wasn't damaged by this ability usage, so not the record we're looking for
						continue;
					}

					DrivingApplyWeaponDamageToUnit.HitResults.AddItem(MyAbilityContext.ResultContext.HitResult);
					DrivingApplyWeaponDamageToUnit.DamageResults.AddItem(TargetGameState.DamageResults[DamageResultIndex]);
				}
				break;
			}
		}
	}
	
	if ( !bMergedAlready )
	{
		MyAbilityContext.SuperMergeIntoVisualizationTree(BuildTree, VisualizationTree);
	}
}

static function X2DataTemplate CreateLostHeadshotInit()
{
	local X2AbilityTemplate Template;
	local X2Effect_TheLostHeadshot LostHeadshotEffect;
	local X2Effect_TargetDamageTypeBonus BonusDamage;
	local X2Effect_DamageImmunity DamageImmunity;

	`CREATE_X2ABILITY_TEMPLATE(Template, 'LostHeadshotInit');

	Template.IconImage = "img:///UILibrary_XPACK_Common.UIPerk_headshot";
	Template.AbilitySourceName = 'eAbilitySource_Perk';
	Template.eAbilityIconBehaviorHUD = EAbilityIconBehavior_NeverShow;
	Template.Hostility = eHostility_Neutral;
	Template.bDontDisplayInAbilitySummary = true;

	Template.AbilityToHitCalc = default.DeadEye;
	Template.AbilityTargetStyle = default.SelfTarget;
	Template.AbilityTriggers.AddItem(default.UnitPostBeginPlayTrigger);

	// Build the headshot effect
	LostHeadshotEffect = new class'X2Effect_TheLostHeadshot';
	LostHeadshotEffect.BuildPersistentEffect(1,  true, false, true);
	LostHeadshotEffect.SetDisplayInfo(ePerkBuff_Penalty, Template.LocFriendlyName, Template.GetMyLongDescription(), Template.IconImage, false,,Template.AbilitySourceName);
	Template.AddTargetEffect(LostHeadshotEffect);

	BonusDamage = new class'X2Effect_TargetDamageTypeBonus';
	BonusDamage.EffectName = 'TheLostFireVulnerability';
	BonusDamage.BuildPersistentEffect(1, true, false, true);
	BonusDamage.SetDisplayInfo(ePerkBuff_Penalty, default.FireVulnerabilityFriendlyName, default.FireVulnerabilityFriendlyDesc, "img:///UILibrary_PerkIcons.UIPerk_burn", false);
	BonusDamage.DuplicateResponse = eDupe_Ignore;
	BonusDamage.BonusDmg = default.LOST_BURNING_DMG_MULTIPLIER;
	BonusDamage.BonusModType = MODOP_Multiplication;
	BonusDamage.BonusDamageTypes.AddItem('fire');
	Template.AddTargetEffect(BonusDamage);

	// Build the immunities
	DamageImmunity = new class'X2Effect_DamageImmunity';
	DamageImmunity.BuildPersistentEffect(1, true, false, true);
	DamageImmunity.ImmuneTypes.AddItem(class'X2Item_DefaultDamageTypes'.default.DisorientDamageType);
	Template.AddTargetEffect(DamageImmunity);

	Template.AdditionalAbilities.AddItem('LostCatchingFire');
	Template.BuildNewGameStateFn = TypicalAbility_BuildGameState;

	return Template;
}

static function X2DataTemplate CreateLostHowlerAbility()
{
	local X2AbilityTemplate Template;
	local X2AbilityCost_ActionPoints ActionPointCost;
	local X2AbilityCooldown_LocalAndGlobal Cooldown;
	local X2AbilityCharges Charges;
	local X2AbilityCost_Charges ChargeCost;

	`CREATE_X2ABILITY_TEMPLATE(Template, 'LostHowlerAbility');
	Template.IconImage = "img:///UILibrary_PerkIcons.UIPerk_losthowler";
	Template.Hostility = eHostility_Neutral;
	Template.AbilitySourceName = 'eAbilitySource_Standard';
	Template.eAbilityIconBehaviorHUD = eAbilityIconBehavior_AlwaysShow;

	ActionPointCost = new class'X2AbilityCost_ActionPoints';
	ActionPointCost.iNumPoints = 1;
	ActionPointCost.bConsumeAllPoints = false;
	Template.AbilityCosts.AddItem(ActionPointCost);

	// Update - one time use ability.
	Charges = new class 'X2AbilityCharges';
	Charges.InitialCharges = 1;
	Template.AbilityCharges = Charges;

	ChargeCost = new class'X2AbilityCost_Charges';
	ChargeCost.NumCharges = 1;
	Template.AbilityCosts.AddItem(ChargeCost);

	Cooldown = new class'X2AbilityCooldown_LocalAndGlobal';
	Cooldown.iNumTurns = default.LOSTHOWLER_LOCAL_COOLDOWN;
	Cooldown.NumGlobalTurns = default.LOSTHOWLER_GLOBAL_COOLDOWN;
	Template.AbilityCooldown = Cooldown;

	Template.AbilityToHitCalc = default.DeadEye;
	Template.AbilityTargetStyle = default.SelfTarget;
	Template.AbilityTriggers.AddItem(default.PlayerInputTrigger);

	Template.AbilityShooterConditions.AddItem(default.LivingShooterProperty);

	Template.BuildNewGameStateFn = TypicalAbility_BuildGameState;
	Template.BuildVisualizationFn = TypicalAbility_BuildVisualization;

//BEGIN AUTOGENERATED CODE: Template Overrides 'LostHowlerAbility'
	Template.bShowActivation = false;
	Template.CustomFireAnim = 'NO_Howl';
	Template.CinescriptCameraType = "Lost_Howel";
//END AUTOGENERATED CODE: Template Overrides 'LostHowlerAbility'


	Template.LostSpawnIncreasePerUse = default.LOST_HOWLER_SOUND_MAGNITUDE;
	
	return Template;
}

// Ability to kick off Lost Unit Catching-Fire behavior tree.
static function X2DataTemplate CreateLostCatchingFireAbility()
{
	local X2AbilityTemplate Template;
	local X2Effect_RunBehaviorTree LostCatchingFireBehaviorEffect;
	local X2AbilityTrigger_EventListener Trigger;

	`CREATE_X2ABILITY_TEMPLATE(Template, 'LostCatchingFire');
	Template.eAbilityIconBehaviorHUD = EAbilityIconBehavior_NeverShow;
	Template.Hostility = eHostility_Neutral;
	Template.bDontDisplayInAbilitySummary = true;

	Template.AbilityToHitCalc = default.DeadEye;
	Template.AbilityTargetStyle = default.SelfTarget;

	Trigger = new class'X2AbilityTrigger_EventListener';
	Trigger.ListenerData.Deferral = ELD_OnStateSubmitted;
	Trigger.ListenerData.EventID = class'X2Effect_Burning'.default.BurningEffectAddedEventName;
	Trigger.ListenerData.EventFn = class'XComGameState_Ability'.static.AbilityTriggerEventListener_Self;
	Trigger.ListenerData.Filter = eFilter_Unit;
	Template.AbilityTriggers.AddItem(Trigger);

	// Build the behavior tree effect
	LostCatchingFireBehaviorEffect = new class'X2Effect_RunBehaviorTree';
	LostCatchingFireBehaviorEffect.BehaviorTreeName = 'LostBurningRoot';
	LostCatchingFireBehaviorEffect.SetActionPointCount = 1;
	Template.AddTargetEffect(LostCatchingFireBehaviorEffect);

	Template.BuildNewGameStateFn = TypicalAbility_BuildGameState;

	return Template;
}


defaultproperties
{
}
