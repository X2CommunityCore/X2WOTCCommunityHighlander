//---------------------------------------------------------------------------------------
//  Copyright (c) 2016 Firaxis Games, Inc. All rights reserved.
//---------------------------------------------------------------------------------------
class X2Ability_DLC_60ArchonKing extends X2Ability
	config(GameData_SoldierSkills);

// --------------- Variable Declarations --------------------------------------
var config int KING_BLAZING_PINIONS_COOLDOWN;
var config int KING_BLAZING_PINIONS_TARGETING_AREA_RADIUS;
var config int KING_BLAZING_PINIONS_SELECTION_RANGE;
var config int KING_BLAZING_PINIONS_NUM_TARGETS;
var config float KING_BLAZING_PINIONS_IMPACT_RADIUS_METERS;
var config int KING_BLAZING_PINIONS_ENVIRONMENT_DAMAGE_AMOUNT;
var config string KING_BLAZING_PINIONS_TARGET_PARTICLE_SYSTEM;
var const config int KING_BLAZING_DISORIENTED_MAX_ALLOWED;
var const config int KING_BLAZING_STUNNED_MAX_ALLOWED;
var const config int KING_BLAZING_UNCONSCIOUS_MAX_ALLOWED;
var config int ICARUS_DROP_FRAGILE_AMOUNT;
var config float ICARUS_DROP_FLY_HEIGHT_MODIFIER;
var config int ICARUS_DROP_TILE_DMG_HEIGHT_MODIFIER;
var config int ICARUS_DROP_COOLDOWN;
var config int ICARUS_DROP_GRAB_DODGE;
var config int ICARUS_DROP_GRAB_DEFENSE;
var privatewrite name KingBlazingPinionsStage2AbilityName;
var privatewrite name IcarusDropGrabbeeAnimSetEffectName;
var privatewrite name IcarusDropGrabbeeEffect_SustainedName;
var privatewrite name IcarusDropGrabberEffectName;
var privatewrite name IcarusDropGrabberDamageImmunityEffectName;

static function array<X2DataTemplate> CreateTemplates()
{
	local array<X2DataTemplate> Templates;
	
	Templates.AddItem(CreateBlazingPinionsStage1Ability());
	Templates.AddItem(CreateBlazingPinionsStage2Ability());
	Templates.AddItem(CreateIcarusDropGrabAbility());
	Templates.AddItem(CreateIcarusDropSlamAbility());
	Templates.AddItem(CreateMeleeNoEndAbility());
	
	return Templates;
}

static function X2AbilityTemplate CreateMeleeNoEndAbility()
{
	local X2AbilityTemplate Template;
	local int				AbilityCostIndex;

	Template = class'X2Ability_WeaponCommon'.static.Add_StandardMelee('StandardMelee_NoEnd');

	// Set to not end the turn.
	for( AbilityCostIndex = 0; AbilityCostIndex < Template.AbilityCosts.Length; ++AbilityCostIndex )
	{
		if( Template.AbilityCosts[AbilityCostIndex].IsA('X2AbilityCost_ActionPoints') )
		{
			X2AbilityCost_ActionPoints(Template.AbilityCosts[AbilityCostIndex]).bConsumeAllPoints = false;
		}
	}

//BEGIN AUTOGENERATED CODE: Template Overrides 'StandardMelee_NoEnd'
	Template.bFrameEvenWhenUnitIsHidden = true;
//END AUTOGENERATED CODE: Template Overrides 'StandardMelee_NoEnd'
	class'X2Ability_DLC_Day60AlienRulers'.static.RemoveMimicBeaconsFromTargets(Template);
	return Template;
}

static function X2DataTemplate CreateBlazingPinionsStage1Ability()
{
	local X2AbilityTemplate Template;
	local X2AbilityCost_ActionPoints ActionPointCost;
	local X2AbilityMultiTarget_BlazingPinions BlazingPinionsMultiTarget;
	local X2AbilityTarget_Cursor CursorTarget;
	local X2Condition_UnitProperty UnitProperty;
	local X2Effect_DelayedAbilityActivation BlazingPinionsStage1DelayEffect;
	local X2Effect_Persistent BlazingPinionsStage1Effect;
	local X2Effect_ApplyBlazingPinionsTargetToWorld BlazingPinionsTargetEffect;
	local X2AbilityCooldown						Cooldown;

	`CREATE_X2ABILITY_TEMPLATE(Template, 'ArchonKingBlazingPinionsStage1');
	Template.IconImage = "img:///UILibrary_DLC2Images.UIPerk_archon_devestate"; // TODO: Change this icon
	Template.Hostility = eHostility_Offensive;
	Template.AbilitySourceName = 'eAbilitySource_Standard';
	Template.bShowActivation = true;
	Template.eAbilityIconBehaviorHUD = eAbilityIconBehavior_AlwaysShow;
	Template.TwoTurnAttackAbility = default.KingBlazingPinionsStage2AbilityName;

	ActionPointCost = new class'X2AbilityCost_ActionPoints';
	ActionPointCost.iNumPoints = 1;
	ActionPointCost.bConsumeAllPoints = false;
	Template.AbilityCosts.AddItem(ActionPointCost);

	// Cooldown on the ability
	Cooldown = new class'X2AbilityCooldown';
	Cooldown.iNumTurns = default.KING_BLAZING_PINIONS_COOLDOWN;
	Template.AbilityCooldown = Cooldown;

	UnitProperty = new class'X2Condition_UnitProperty';
	UnitProperty.ExcludeDead = true;
	UnitProperty.HasClearanceToMaxZ = true;
	Template.AbilityShooterConditions.AddItem(UnitProperty);

	Template.AbilityToHitCalc = default.DeadEye;
	Template.AbilityTriggers.AddItem(default.PlayerInputTrigger);
 
	Template.TargetingMethod = class'X2TargetingMethod_BlazingPinions';

	// The target locations are enemies
	UnitProperty = new class'X2Condition_UnitProperty';
	UnitProperty.ExcludeFriendlyToSource = true;
	UnitProperty.ExcludeCivilian = true;
	UnitProperty.ExcludeDead = true;
	UnitProperty.HasClearanceToMaxZ = true;
	UnitProperty.FailOnNonUnits = true;
	Template.AbilityMultiTargetConditions.AddItem(UnitProperty);

	BlazingPinionsMultiTarget = new class'X2AbilityMultiTarget_BlazingPinions';
	BlazingPinionsMultiTarget.fTargetRadius = default.KING_BLAZING_PINIONS_TARGETING_AREA_RADIUS;
	BlazingPinionsMultiTarget.NumTargetsRequired = default.KING_BLAZING_PINIONS_NUM_TARGETS;
	Template.AbilityMultiTargetStyle = BlazingPinionsMultiTarget;

	CursorTarget = new class'X2AbilityTarget_Cursor';
	CursorTarget.FixedAbilityRange = default.KING_BLAZING_PINIONS_SELECTION_RANGE;
	Template.AbilityTargetStyle = CursorTarget;

	//Delayed Effect to cause the second Blazing Pinions stage to occur
	BlazingPinionsStage1DelayEffect = new class 'X2Effect_DelayedAbilityActivation';
	BlazingPinionsStage1DelayEffect.BuildPersistentEffect(1, false, false, , eGameRule_PlayerTurnBegin);
	BlazingPinionsStage1DelayEffect.EffectName = 'BlazingPinionsStage1Delay';
	BlazingPinionsStage1DelayEffect.TriggerEventName = class'X2Ability_Archon'.default.BlazingPinionsStage2TriggerName;
	BlazingPinionsStage1DelayEffect.SetDisplayInfo(ePerkBuff_Passive, Template.LocFriendlyName, Template.GetMyLongDescription(), Template.IconImage, true, , Template.AbilitySourceName);
	BlazingPinionsStage1DelayEffect.bCanTickEveryAction = true;
	BlazingPinionsStage1DelayEffect.bConvertTurnsToActions = false;
	Template.AddShooterEffect(BlazingPinionsStage1DelayEffect);

	// An effect to attach Perk FX to
	BlazingPinionsStage1Effect = new class'X2Effect_Persistent';
	BlazingPinionsStage1Effect.BuildPersistentEffect(1, true, false, true);
	BlazingPinionsStage1Effect.EffectName = class'X2Ability_Archon'.default.BlazingPinionsStage1EffectName;
	Template.AddShooterEffect(BlazingPinionsStage1Effect);

	//  The target FX goes in target array as there will be no single target hit and no side effects of this touching a unit
	BlazingPinionsTargetEffect = new class'X2Effect_ApplyBlazingPinionsTargetToWorld';
	BlazingPinionsTargetEffect.OverrideParticleSystemFill_Name = default.KING_BLAZING_PINIONS_TARGET_PARTICLE_SYSTEM;
	Template.AddShooterEffect(BlazingPinionsTargetEffect);

	Template.ModifyNewContextFn = BlazingPinionsStage1_ModifyActivatedAbilityContext;
	Template.BuildNewGameStateFn = BlazingPinionsStage1_BuildGameState;
	Template.BuildInterruptGameStateFn = TypicalAbility_BuildInterruptGameState;
	Template.BuildVisualizationFn = BlazingPinionsStage1_BuildVisualization;
	Template.BuildAppliedVisualizationSyncFn = BlazingPinionsStage1_BuildVisualizationSync;
	Template.CinescriptCameraType = "Archon_BlazingPinions_Stage1";
//BEGIN AUTOGENERATED CODE: Template Overrides 'ArchonKingBlazingPinionsStage1'
	Template.bFrameEvenWhenUnitIsHidden = true;
//END AUTOGENERATED CODE: Template Overrides 'ArchonKingBlazingPinionsStage1'
	
	return Template;
}

simulated function BlazingPinionsStage1_ModifyActivatedAbilityContext(XComGameStateContext Context)
{
	local XComGameState_Unit UnitState;
	local XComGameStateContext_Ability AbilityContext;
	local XComGameStateHistory History;
	local vector EndLocation;
	local TTile EndTileLocation;
	local XComWorldData World;
	local PathingInputData InputData;
	local PathingResultData ResultData;

	History = `XCOMHISTORY;
	World = `XWORLD;

	AbilityContext = XComGameStateContext_Ability(Context);
	`assert(AbilityContext.InputContext.TargetLocations.Length > 0);
	
	UnitState = XComGameState_Unit(History.GetGameStateForObjectID(AbilityContext.InputContext.SourceObject.ObjectID));

	// solve the path to get him to the fire location
	EndLocation = AbilityContext.InputContext.TargetLocations[0];
	EndTileLocation = World.GetTileCoordinatesFromPosition(EndLocation);
	EndTileLocation.Z = World.NumZ - 3; // Subtract Magic Number X to make the height visually appealing

	class'X2PathSolver'.static.BuildPath(UnitState, UnitState.TileLocation, EndTileLocation, InputData.MovementTiles, false);
	
	// get the path points
	class'X2PathSolver'.static.GetPathPointsFromPath(UnitState, InputData.MovementTiles, InputData.MovementData);

	// string pull the path to smooth it out
	class'XComPath'.static.PerformStringPulling(XGUnitNativeBase(UnitState.GetVisualizer()), InputData.MovementData);

	//Now add the path to the input context
	InputData.MovingUnitRef = UnitState.GetReference();
	AbilityContext.InputContext.MovementPaths.AddItem(InputData);

	// Update the result context's PathTileData, without this the AI doesn't know it has been seen and will use the invisible teleport move action
	class'X2TacticalVisibilityHelpers'.static.FillPathTileData(AbilityContext.InputContext.SourceObject.ObjectID, InputData.MovementTiles, ResultData.PathTileData);
	AbilityContext.ResultContext.PathResults.AddItem(ResultData);
}

simulated function XComGameState BlazingPinionsStage1_BuildGameState(XComGameStateContext Context)
{
	local XComGameState NewGameState;
	local XComGameState_Unit UnitState;
	local XComGameStateContext_Ability AbilityContext;
	local vector NewLocation;
	local TTile NewTileLocation;
	local XComWorldData World;
	local X2EventManager EventManager;
	local int LastPathElement;

	World = `XWORLD;
	EventManager = `XEVENTMGR;

	//Build the new game state frame
	NewGameState = TypicalAbility_BuildGameState(Context);

	AbilityContext = XComGameStateContext_Ability(NewGameState.GetContext());	
	UnitState = XComGameState_Unit(NewGameState.ModifyStateObject(class'XComGameState_Unit', AbilityContext.InputContext.SourceObject.ObjectID));
	
	LastPathElement = AbilityContext.InputContext.MovementPaths[0].MovementData.Length - 1;

	// Move the unit vertically, set the unit's new location
	// The last position in MovementData will be the end location
	`assert(LastPathElement > 0);
	NewLocation = AbilityContext.InputContext.MovementPaths[0].MovementData[LastPathElement].Position;
	NewTileLocation = World.GetTileCoordinatesFromPosition(NewLocation);
	UnitState.SetVisibilityLocation(NewTileLocation);

	AbilityContext.ResultContext.bPathCausesDestruction = MoveAbility_StepCausesDestruction(UnitState, AbilityContext.InputContext, 0, LastPathElement);
	MoveAbility_AddTileStateObjects(NewGameState, UnitState, AbilityContext.InputContext, 0, LastPathElement);

	EventManager.TriggerEvent('ObjectMoved', UnitState, UnitState, NewGameState);
	EventManager.TriggerEvent('UnitMoveFinished', UnitState, UnitState, NewGameState);

	//Return the game state we have created
	return NewGameState;
}

simulated function BlazingPinionsStage1_BuildVisualization(XComGameState VisualizeGameState)
{
	local XComGameStateHistory History;
	local XComGameStateContext_Ability  AbilityContext;
	local StateObjectReference InteractingUnitRef;
	local X2AbilityTemplate AbilityTemplate;
	local VisualizationActionMetadata EmptyTrack, ActionMetadata;
	local X2Action_PlaySoundAndFlyOver SoundAndFlyover;
	local int i;
	local X2Action_MoveTurn MoveTurnAction;
	local X2Action_PlayAnimation PlayAnimation;

	History = `XCOMHISTORY;

	AbilityContext = XComGameStateContext_Ability(VisualizeGameState.GetContext());
	InteractingUnitRef = AbilityContext.InputContext.SourceObject;

	AbilityTemplate = class'XComGameState_Ability'.static.GetMyTemplateManager().FindAbilityTemplate(AbilityContext.InputContext.AbilityTemplateName);

	//****************************************************************************************
	//Configure the visualization track for the source
	//****************************************************************************************
	ActionMetadata = EmptyTrack;
	ActionMetadata.StateObject_OldState = History.GetGameStateForObjectID(InteractingUnitRef.ObjectID, eReturnType_Reference, VisualizeGameState.HistoryIndex - 1);
	ActionMetadata.StateObject_NewState = VisualizeGameState.GetGameStateForObjectID(InteractingUnitRef.ObjectID);
	ActionMetadata.VisualizeActor = History.GetVisualizer(InteractingUnitRef.ObjectID);

	SoundAndFlyOver = X2Action_PlaySoundAndFlyOver(class'X2Action_PlaySoundAndFlyover'.static.AddToVisualizationTree(ActionMetadata, AbilityContext));
	SoundAndFlyOver.SetSoundAndFlyOverParameters(None, AbilityTemplate.LocFlyOverText, '', eColor_Bad);

	// Turn to face the target action. The target location is the center of the ability's radius, stored in the 0 index of the TargetLocations
	MoveTurnAction = X2Action_MoveTurn(class'X2Action_MoveTurn'.static.AddToVisualizationTree(ActionMetadata, AbilityContext));
	MoveTurnAction.m_vFacePoint = AbilityContext.InputContext.TargetLocations[0];

	// Fly up actions
	class'X2VisualizerHelpers'.static.ParsePath(AbilityContext, ActionMetadata);

	// Play the animation to get him to his looping idle
	PlayAnimation = X2Action_PlayAnimation(class'X2Action_PlayAnimation'.static.AddToVisualizationTree(ActionMetadata, AbilityContext));
	PlayAnimation.Params.AnimName = 'HL_Devastate';
	
	for( i = 0; i < AbilityContext.ResultContext.ShooterEffectResults.Effects.Length; ++i )
	{
		AbilityContext.ResultContext.ShooterEffectResults.Effects[i].AddX2ActionsForVisualization(VisualizeGameState, ActionMetadata, 
																								  AbilityContext.ResultContext.ShooterEffectResults.ApplyResults[i]);
	}

	}

simulated function BlazingPinionsStage1_BuildVisualizationSync( name EffectName, XComGameState VisualizeGameState, out VisualizationActionMetadata ActionMetadata )
{
	local X2Action_MoveTurn MoveTurnAction;
	local XComGameStateContext_Ability  AbilityContext;
	local X2AbilityTemplate AbilityTemplate;
	local X2Action_PlayAnimation PlayAnimation;
	local X2Action_MoveTeleport MoveTeleport;
	local PathingInputData PathingData;
	local PathingResultData ResultData;
	local vector PathEndPos;
	local int i, LastPathIndex;

	if (!`XENGINE.IsMultiplayerGame() && EffectName == 'BlazingPinionsStage1Delay')
	{
		AbilityContext = XComGameStateContext_Ability( VisualizeGameState.GetContext( ) );
		AbilityTemplate = class'X2AbilityTemplateManager'.static.GetAbilityTemplateManager().FindAbilityTemplate(AbilityContext.InputContext.AbilityTemplateName);

		//The unit may be dead when loading a save. Don't try to make the archon fly around if so
		if (XComGameState_Unit(ActionMetadata.StateObject_NewState).IsAlive())
		{
			// Turn to face the target action. The target location is the center of the ability's radius, stored in the 0 index of the TargetLocations
			MoveTurnAction = X2Action_MoveTurn(class'X2Action_MoveTurn'.static.AddToVisualizationTree(ActionMetadata, AbilityContext));
			MoveTurnAction.m_vFacePoint = AbilityContext.InputContext.TargetLocations[0];

			// Fly up actions
			PathingData = AbilityContext.InputContext.MovementPaths[0];
			ResultData = AbilityContext.ResultContext.PathResults[0];
			LastPathIndex = PathingData.MovementData.Length - 1;
			PathEndPos = PathingData.MovementData[LastPathIndex].Position;
			MoveTeleport = X2Action_MoveTeleport(class'X2Action_MoveTeleport'.static.AddToVisualizationTree(ActionMetadata, ABilityContext));
			MoveTeleport.ParsePathSetParameters(LastPathIndex, PathEndPos, 0, PathingData, ResultData);
			MoveTeleport.SnapToGround = false;

			// Play the animation to get him to his looping idle
			PlayAnimation = X2Action_PlayAnimation(class'X2Action_PlayAnimation'.static.AddToVisualizationTree(ActionMetadata, AbilityContext));
			PlayAnimation.Params.AnimName = 'HL_Devastate';
		}

		// The references to the shooter effect instances in the input context don't restore to be the references to the ability
		// template that they should.  Which is okay, we'll just use the effects directly.
		for (i = 0; i < AbilityTemplate.AbilityShooterEffects.Length; ++i)
		{
			AbilityTemplate.AbilityShooterEffects[ i ].AddX2ActionsForVisualization( VisualizeGameState, ActionMetadata,
				AbilityContext.ResultContext.ShooterEffectResults.ApplyResults[ i ] );
		}
	}
}

static function X2DataTemplate CreateBlazingPinionsStage2Ability()
{
	local X2AbilityTemplate Template;
	local X2AbilityTrigger_EventListener DelayedEventListener;
	local X2Effect_RemoveEffects RemoveEffects;
	local X2Effect_ApplyWeaponDamage DamageEffect;
	local X2AbilityMultiTarget_Radius RadMultiTarget;
	local X2AbilityToHitCalc_StatCheck_UnitVsUnit StatContest;
	local X2Effect_Persistent DisorientedEffect;
	local X2Effect_Stunned StunnedEffect;
	local X2Effect_Persistent UnconsciousEffect;

	`CREATE_X2ABILITY_TEMPLATE(Template, default.KingBlazingPinionsStage2AbilityName);
	Template.eAbilityIconBehaviorHUD = EAbilityIconBehavior_NeverShow;

	Template.bDontDisplayInAbilitySummary = true;
	Template.AbilityTargetStyle = default.SelfTarget;

	// Multi Target Conditions
	Template.AbilityMultiTargetConditions.AddItem(default.LivingTargetUnitOnlyProperty);

	// This ability fires when the event DelayedExecuteRemoved fires on this unit
	DelayedEventListener = new class'X2AbilityTrigger_EventListener';
	DelayedEventListener.ListenerData.Deferral = ELD_OnStateSubmitted;
	DelayedEventListener.ListenerData.EventID = class'X2Ability_Archon'.default.BlazingPinionsStage2TriggerName;
	DelayedEventListener.ListenerData.Filter = eFilter_Unit;
	DelayedEventListener.ListenerData.EventFn = class'XComGameState_Ability'.static.AbilityTriggerEventListener_BlazingPinions;
	Template.AbilityTriggers.AddItem(DelayedEventListener);

	RemoveEffects = new class'X2Effect_RemoveEffects';
	RemoveEffects.EffectNamesToRemove.AddItem(class'X2Ability_Archon'.default.BlazingPinionsStage1EffectName);
	RemoveEffects.EffectNamesToRemove.AddItem(class'X2Effect_ApplyBlazingPinionsTargetToWorld'.default.EffectName);
	Template.AddShooterEffect(RemoveEffects);

	RadMultiTarget = new class'X2AbilityMultiTarget_Radius';
	RadMultiTarget.fTargetRadius = default.KING_BLAZING_PINIONS_IMPACT_RADIUS_METERS;

	Template.AbilityMultiTargetStyle = RadMultiTarget;

	// This will be a stat contest
	StatContest = new class'X2AbilityToHitCalc_StatCheck_UnitVsUnit';
	StatContest.AttackerStat = eStat_Strength;
	Template.AbilityToHitCalc = StatContest;

	// On hit effects
	//  Stunned effect for 1 or 2 unblocked hit
	DisorientedEffect = class'X2StatusEffects'.static.CreateDisorientedStatusEffect(, , false);
	DisorientedEffect.MinStatContestResult = 1;
	DisorientedEffect.MaxStatContestResult = 2;
	DisorientedEffect.MultiTargetStatContestInfo.MaxNumberAllowed = default.KING_BLAZING_DISORIENTED_MAX_ALLOWED;
	DisorientedEffect.bRemoveWhenSourceDies = false;
	Template.AddMultiTargetEffect(DisorientedEffect);

	//  Stunned effect for 3 or 4 unblocked hit
	StunnedEffect = class'X2StatusEffects'.static.CreateStunnedStatusEffect(1, 100, false);
	StunnedEffect.MinStatContestResult = 3;
	StunnedEffect.MaxStatContestResult = 4;
	StunnedEffect.MultiTargetStatContestInfo.MaxNumberAllowed = default.KING_BLAZING_STUNNED_MAX_ALLOWED;  // Max number of stunned units allowed from this ability
	StunnedEffect.MultiTargetStatContestInfo.EffectIdxToApplyOnMaxExceeded = 0;    // After the max allowed, targets become disoriented
	StunnedEffect.bRemoveWhenSourceDies = false;
	Template.AddMultiTargetEffect(StunnedEffect);

	//  Unconscious effect for 5 unblocked hits
	UnconsciousEffect = class'X2StatusEffects'.static.CreateUnconsciousStatusEffect();
	UnconsciousEffect.MinStatContestResult = 5;
	UnconsciousEffect.MaxStatContestResult = 0;
	UnconsciousEffect.MultiTargetStatContestInfo.MaxNumberAllowed = default.KING_BLAZING_UNCONSCIOUS_MAX_ALLOWED;  // Max number of the multitargets that may become unconscious
	UnconsciousEffect.MultiTargetStatContestInfo.EffectIdxToApplyOnMaxExceeded = 1;    // After the max allowed, targets become stunned
	UnconsciousEffect.bRemoveWhenSourceDies = false;
	Template.AddMultiTargetEffect(UnconsciousEffect);

	// The MultiTarget Units are dealt this damage
	DamageEffect = new class'X2Effect_ApplyWeaponDamage';
	DamageEffect.bApplyWorldEffectsForEachTargetLocation = true;
	Template.AddMultiTargetEffect(DamageEffect);

	Template.ModifyNewContextFn = BlazingPinionsStage2_ModifyActivatedAbilityContext;
	Template.BuildNewGameStateFn = BlazingPinionsStage2_BuildGameState;
	Template.BuildVisualizationFn = BlazingPinionsStage2_BuildVisualization;
	Template.CinescriptCameraType = "Archon_BlazingPinions_Stage2";

	Template.LostSpawnIncreasePerUse = class'X2AbilityTemplateManager'.default.HeavyWeaponLostSpawnIncreasePerUse;
//BEGIN AUTOGENERATED CODE: Template Overrides 'ArchonKingBlazingPinionsStage2'
	Template.bFrameEvenWhenUnitIsHidden = true;
//END AUTOGENERATED CODE: Template Overrides 'ArchonKingBlazingPinionsStage2'

	return Template;
}

simulated function BlazingPinionsStage2_ModifyActivatedAbilityContext(XComGameStateContext Context)
{
	local XComGameState_Unit UnitState;
	local XComGameStateContext_Ability AbilityContext;
	local XComGameStateHistory History;
	local TTile SelectedTile, LandingTile;
	local XComWorldData World;
	local vector TargetLocation, LandingLocation;
	local array<vector> FloorPoints;
	local int i;
	local X2AbilityMultiTargetStyle RadiusMultiTarget;
	local XComGameState_Ability AbilityState;
	local AvailableTarget MultiTargets;
	local PathingInputData InputData;
	local X2AbilityTemplate AbilityTemplate;
	local AvailableTarget kTarget;
	local name AvailableCode;

	History = `XCOMHISTORY;
	World = `XWORLD;

	AbilityContext = XComGameStateContext_Ability(Context);
	
	UnitState = XComGameState_Unit(History.GetGameStateForObjectID(AbilityContext.InputContext.SourceObject.ObjectID));

	// Find a valid landing location
	TargetLocation = World.GetPositionFromTileCoordinates(UnitState.TileLocation);

	LandingLocation = TargetLocation;
	LandingLocation.Z = World.GetFloorZForPosition(TargetLocation, true);
	LandingTile = World.GetTileCoordinatesFromPosition(LandingLocation);
	LandingTile = class'Helpers'.static.GetClosestValidTile(LandingTile);

	if( !World.CanUnitsEnterTile(LandingTile) )
	{
		// The selected tile is no longer valid. A new landing position
		// must be found. TODO: Decide what to do when FoundFloorPositions is false.
		World.GetFloorTilePositions(TargetLocation, World.WORLD_StepSize * default.KING_BLAZING_PINIONS_TARGETING_AREA_RADIUS, World.WORLD_StepSize, FloorPoints, true);

		i = 0;
		while( i < FloorPoints.Length )
		{
			LandingLocation = FloorPoints[i];
			LandingTile = World.GetTileCoordinatesFromPosition(LandingLocation);
			if( World.CanUnitsEnterTile(SelectedTile) )
			{
				// Found a valid landing location
				i = FloorPoints.Length;
			}

			++i;
		}
	}

	//Attempting to build a path to our current location causes a problem, so avoid that
	if(UnitState.TileLocation != LandingTile) 
	{
		// Build the MovementData for the path
		// solve the path to get him to the end location
		class'X2PathSolver'.static.BuildPath(UnitState, UnitState.TileLocation, LandingTile, InputData.MovementTiles, false);

		// get the path points
		class'X2PathSolver'.static.GetPathPointsFromPath(UnitState, InputData.MovementTiles, InputData.MovementData);

		// string pull the path to smooth it out
		class'XComPath'.static.PerformStringPulling(XGUnitNativeBase(UnitState.GetVisualizer()), InputData.MovementData);

		//Now add the path to the input context
		InputData.MovingUnitRef = UnitState.GetReference();
		AbilityContext.InputContext.MovementPaths.AddItem(InputData);
	}

	// Build the MultiTarget array based upon the impact points
	AbilityState = XComGameState_Ability(History.GetGameStateForObjectID(AbilityContext.InputContext.AbilityRef.ObjectID, eReturnType_Reference));
	RadiusMultiTarget = AbilityState.GetMyTemplate().AbilityMultiTargetStyle;// new class'X2AbilityMultiTarget_Radius';

	AbilityContext.ResultContext.ProjectileHitLocations.Length = 0;
	for( i = 0; i < AbilityContext.InputContext.TargetLocations.Length; ++i )
	{
		RadiusMultiTarget.GetMultiTargetsForLocation(AbilityState, AbilityContext.InputContext.TargetLocations[i], MultiTargets);

		// Add the TargetLocations as ProjectileHitLocations
		AbilityContext.ResultContext.ProjectileHitLocations.AddItem(AbilityContext.InputContext.TargetLocations[i]);
	}

	// Cull multi targets based on conditions
	AbilityTemplate = AbilityState.GetMyTemplate();
	for( i = MultiTargets.AdditionalTargets.Length - 1; i >= 0; --i )
	{
		AvailableCode = AbilityTemplate.CheckMultiTargetConditions(AbilityState, UnitState, History.GetGameStateForObjectID(MultiTargets.AdditionalTargets[i].ObjectID));
		if( AvailableCode != 'AA_Success' )
		{
			MultiTargets.AdditionalTargets.Remove(i, 1);
		}
	}
	AbilityContext.InputContext.MultiTargets = MultiTargets.AdditionalTargets;

	//Re-Calculate the chance to hit here because we had to get the MultiTargets above
	if( AbilityTemplate.AbilityToHitCalc != none )
	{
		kTarget.PrimaryTarget = AbilityContext.InputContext.PrimaryTarget;
		kTarget.AdditionalTargets = AbilityContext.InputContext.MultiTargets;
		AbilityTemplate.AbilityToHitCalc.RollForAbilityHit(AbilityState, kTarget, AbilityContext.ResultContext);
	}
}

simulated function XComGameState BlazingPinionsStage2_BuildGameState(XComGameStateContext Context)
{
	local XComGameState NewGameState;
	local XComGameState_Unit UnitState;	
	local XComGameStateContext_Ability AbilityContext;
	local TTile LandingTile;
	local XComWorldData World;
	local X2EventManager EventManager;
	local vector LandingLocation;
	local int LastPathElement;

	World = `XWORLD;
	EventManager = `XEVENTMGR;

	//Build the new game state frame
	NewGameState = TypicalAbility_BuildGameState(Context);

	AbilityContext = XComGameStateContext_Ability(NewGameState.GetContext());	
	UnitState = XComGameState_Unit(NewGameState.ModifyStateObject(class'XComGameState_Unit', AbilityContext.InputContext.SourceObject.ObjectID));
	
	if(AbilityContext.InputContext.MovementPaths.Length > 0)
	{
		LastPathElement = AbilityContext.InputContext.MovementPaths[0].MovementData.Length - 1;

		// Move the unit vertically, set the unit's new location
		// The last position in MovementData will be the end location
		`assert(LastPathElement > 0);
		LandingLocation = AbilityContext.InputContext.MovementPaths[0].MovementData[LastPathElement /*- 1*/].Position;
		LandingTile = World.GetTileCoordinatesFromPosition(LandingLocation);
		UnitState.SetVisibilityLocation(LandingTile);

		AbilityContext.ResultContext.bPathCausesDestruction = MoveAbility_StepCausesDestruction(UnitState, AbilityContext.InputContext, 0, AbilityContext.InputContext.MovementPaths[0].MovementTiles.Length - 1);
		MoveAbility_AddTileStateObjects(NewGameState, UnitState, AbilityContext.InputContext, 0, AbilityContext.InputContext.MovementPaths[0].MovementTiles.Length - 1);
		EventManager.TriggerEvent('ObjectMoved', UnitState, UnitState, NewGameState);
		EventManager.TriggerEvent('UnitMoveFinished', UnitState, UnitState, NewGameState);
	}

	//Return the game state we have created
	return NewGameState;
}

simulated function BlazingPinionsStage2_BuildVisualization(XComGameState VisualizeGameState)
{
	local XComGameStateHistory History;
	local XComGameStateContext_Ability  AbilityContext;
	local StateObjectReference InteractingUnitRef;
	local X2AbilityTemplate AbilityTemplate;
	local VisualizationActionMetadata EmptyTrack;
	local VisualizationActionMetadata ActionMetadata, ArchonTrack;
	local X2Action_PlaySoundAndFlyOver SoundAndFlyover;
	local X2Action_PersistentEffect	PersistentEffectAction;
	local int i, j;
	local X2VisualizerInterface TargetVisualizerInterface;

	local XComGameState_EnvironmentDamage EnvironmentDamageEvent;
	local XComGameState_WorldEffectTileData WorldDataUpdate;
	local XComGameState_InteractiveObject InteractiveObject;

	History = `XCOMHISTORY;

	AbilityContext = XComGameStateContext_Ability(VisualizeGameState.GetContext());
	InteractingUnitRef = AbilityContext.InputContext.SourceObject;

	AbilityTemplate = class'XComGameState_Ability'.static.GetMyTemplateManager().FindAbilityTemplate(AbilityContext.InputContext.AbilityTemplateName);

	//****************************************************************************************
	//Configure the visualization track for the source
	//****************************************************************************************
	ArchonTrack = EmptyTrack;
	ArchonTrack.StateObject_OldState = History.GetGameStateForObjectID(InteractingUnitRef.ObjectID, eReturnType_Reference, VisualizeGameState.HistoryIndex - 1);
	ArchonTrack.StateObject_NewState = VisualizeGameState.GetGameStateForObjectID(InteractingUnitRef.ObjectID);
	ArchonTrack.VisualizeActor = History.GetVisualizer(InteractingUnitRef.ObjectID);

	SoundAndFlyOver = X2Action_PlaySoundAndFlyOver(class'X2Action_PlaySoundAndFlyover'.static.AddToVisualizationTree(ArchonTrack, AbilityContext));
	SoundAndFlyOver.SetSoundAndFlyOverParameters(None, AbilityTemplate.LocFlyOverText, '', eColor_Bad);

	// Remove the override idle animation
	PersistentEffectAction = X2Action_PersistentEffect(class'X2Action_PersistentEffect'.static.AddToVisualizationTree(ArchonTrack, AbilityContext));
	PersistentEffectAction.IdleAnimName = '';

	// Play the firing action
	class'X2Action_BlazingPinionsStage2'.static.AddToVisualizationTree(ArchonTrack, AbilityContext);

	for( i = 0; i < AbilityContext.ResultContext.ShooterEffectResults.Effects.Length; ++i )
	{
		AbilityContext.ResultContext.ShooterEffectResults.Effects[i].AddX2ActionsForVisualization(VisualizeGameState, ArchonTrack, 
																								  AbilityContext.ResultContext.ShooterEffectResults.ApplyResults[i]);
	}

	if(AbilityContext.InputContext.MovementPaths.Length > 0)
	{
		class'X2VisualizerHelpers'.static.ParsePath(AbilityContext, ArchonTrack);
	}	
	//****************************************************************************************

	//****************************************************************************************
	//Configure the visualization track for the targets
	//****************************************************************************************
	for (i = 0; i < AbilityContext.InputContext.MultiTargets.Length; ++i)
	{
		InteractingUnitRef = AbilityContext.InputContext.MultiTargets[i];
		ActionMetadata = EmptyTrack;
		ActionMetadata.StateObject_OldState = History.GetGameStateForObjectID(InteractingUnitRef.ObjectID, eReturnType_Reference, VisualizeGameState.HistoryIndex - 1);
		ActionMetadata.StateObject_NewState = VisualizeGameState.GetGameStateForObjectID(InteractingUnitRef.ObjectID);
		ActionMetadata.VisualizeActor = History.GetVisualizer(InteractingUnitRef.ObjectID);

		class'X2Action_WaitForAbilityEffect'.static.AddToVisualizationTree(ActionMetadata, AbilityContext);
		for( j = 0; j < AbilityContext.ResultContext.MultiTargetEffectResults[i].Effects.Length; ++j )
		{
			AbilityContext.ResultContext.MultiTargetEffectResults[i].Effects[j].AddX2ActionsForVisualization(VisualizeGameState, ActionMetadata, AbilityContext.ResultContext.MultiTargetEffectResults[i].ApplyResults[j]);
		}

		TargetVisualizerInterface = X2VisualizerInterface(ActionMetadata.VisualizeActor);
		if( TargetVisualizerInterface != none )
		{
			//Allow the visualizer to do any custom processing based on the new game state. For example, units will create a death action when they reach 0 HP.
			TargetVisualizerInterface.BuildAbilityEffectsVisualization(VisualizeGameState, ActionMetadata);
		}
	}

	//****************************************************************************************
	//Configure the visualization tracks for the environment
	//****************************************************************************************
	foreach VisualizeGameState.IterateByClassType(class'XComGameState_EnvironmentDamage', EnvironmentDamageEvent)
	{
		ActionMetadata = EmptyTrack;
		ActionMetadata.VisualizeActor = none;
		ActionMetadata.StateObject_NewState = EnvironmentDamageEvent;
		ActionMetadata.StateObject_OldState = EnvironmentDamageEvent;

		//Wait until signaled by the shooter that the projectiles are hitting
		class'X2Action_WaitForAbilityEffect'.static.AddToVisualizationTree(ActionMetadata, AbilityContext);

		for( i = 0; i < AbilityTemplate.AbilityMultiTargetEffects.Length; ++i )
		{
			AbilityTemplate.AbilityMultiTargetEffects[i].AddX2ActionsForVisualization(VisualizeGameState, ActionMetadata, 'AA_Success');	
		}

			}

	foreach VisualizeGameState.IterateByClassType(class'XComGameState_WorldEffectTileData', WorldDataUpdate)
	{
		ActionMetadata = EmptyTrack;
		ActionMetadata.VisualizeActor = none;
		ActionMetadata.StateObject_NewState = WorldDataUpdate;
		ActionMetadata.StateObject_OldState = WorldDataUpdate;

		//Wait until signaled by the shooter that the projectiles are hitting
		class'X2Action_WaitForAbilityEffect'.static.AddToVisualizationTree(ActionMetadata, AbilityContext);

		for( i = 0; i < AbilityTemplate.AbilityMultiTargetEffects.Length; ++i )
		{
			AbilityTemplate.AbilityMultiTargetEffects[i].AddX2ActionsForVisualization(VisualizeGameState, ActionMetadata, 'AA_Success');	
		}

			}
	//****************************************************************************************

	//Process any interactions with interactive objects
	foreach VisualizeGameState.IterateByClassType(class'XComGameState_InteractiveObject', InteractiveObject)
	{
		// Add any doors that need to listen for notification
		if( InteractiveObject.IsDoor() && InteractiveObject.HasDestroyAnim() && InteractiveObject.InteractionCount % 2 != 0 ) //Is this a closed door?
		{
			ActionMetadata = EmptyTrack;
			//Don't necessarily have a previous state, so just use the one we know about
			ActionMetadata.StateObject_OldState = InteractiveObject;
			ActionMetadata.StateObject_NewState = InteractiveObject;
			ActionMetadata.VisualizeActor = History.GetVisualizer(InteractiveObject.ObjectID);
			class'X2Action_WaitForAbilityEffect'.static.AddToVisualizationTree(ActionMetadata, AbilityContext);
			class'X2Action_BreakInteractActor'.static.AddToVisualizationTree(ActionMetadata, AbilityContext);

					}
	}

	TypicalAbility_AddEffectRedirects(VisualizeGameState, ArchonTrack);
}

static function X2AbilityTemplate CreateIcarusDropGrabAbility()
{
	local X2AbilityTemplate Template;
	local X2AbilityCost_ActionPoints ActionPointCost;
	local X2Condition_UnitProperty UnitPropertyCondition;
	local X2AbilityTarget_MovingMelee MeleeTarget;
	local X2Condition_UnitEffects ExcludeEffects;
	local X2Effect_PersistentStatChange IcarusDropGrabberEffect;
	local X2Effect_Sustained SustainedEffect;
	local X2Effect_AdditionalAnimSets AdditionalAnimSetsEffect;
	local X2AbilityCooldown Cooldown;
	local X2Effect_DamageImmunity DamageImmunity;

	`CREATE_X2ABILITY_TEMPLATE(Template, 'IcarusDropGrab');
	Template.IconImage = "img:///UILibrary_DLC2Images.UIPerk_archon_icarusdrop";
	Template.Hostility = eHostility_Offensive;
	Template.AbilitySourceName = 'eAbilitySource_Standard';

	Template.AdditionalAbilities.AddItem('IcarusDropSlam');
	Template.AdditionalAbilities.AddItem(class'X2Ability_Impairing'.default.ImpairingAbilityName);

	ActionPointCost = new class'X2AbilityCost_ActionPoints';
	ActionPointCost.iNumPoints = 1;
	ActionPointCost.bConsumeAllPoints = false;
	Template.AbilityCosts.AddItem(ActionPointCost);

	// Cooldown on the ability
	Cooldown = new class'X2AbilityCooldown';
	Cooldown.iNumTurns = default.ICARUS_DROP_COOLDOWN;
	Template.AbilityCooldown = Cooldown;

	Template.AbilityToHitCalc = default.DeadEye;
	Template.AbilityTargetStyle = default.SimpleSingleMeleeTarget;

	Template.AbilityShooterConditions.AddItem(default.LivingShooterProperty);

	// The shooter must not already be grabbing a unit
	ExcludeEffects = new class'X2Condition_UnitEffects';
	ExcludeEffects.AddExcludeEffect(default.IcarusDropGrabberEffectName, 'AA_UnitIsBound');
	Template.AbilityShooterConditions.AddItem(ExcludeEffects);

	UnitPropertyCondition = new class'X2Condition_UnitProperty';
	UnitPropertyCondition.ExcludeDead = true;
	UnitPropertyCondition.ExcludeFriendlyToSource = true;
	UnitPropertyCondition.FailOnNonUnits = true;
	UnitPropertyCondition.ExcludeRobotic = true;
	UnitPropertyCondition.ExcludeAlien = true;
	UnitPropertyCondition.ExcludeTurret = true;
	UnitPropertyCondition.FailOnNonUnits = true;
	Template.AbilityTargetConditions.AddItem(UnitPropertyCondition);
	Template.AbilityTargetConditions.AddItem(default.MeleeVisibilityCondition);

	// The target must not have a cocoon on top of it
	ExcludeEffects = new class'X2Condition_UnitEffects';
	ExcludeEffects.AddExcludeEffect(class'X2Ability_ChryssalidCocoon'.default.GestationStage1EffectName, 'AA_UnitHasCocoonOnIt');
	ExcludeEffects.AddExcludeEffect(class'X2Ability_ChryssalidCocoon'.default.GestationStage2EffectName, 'AA_UnitHasCocoonOnIt');
	ExcludeEffects.AddExcludeEffect(default.IcarusDropGrabbeeEffect_SustainedName, 'AA_UnitIsBound');
	Template.AbilityTargetConditions.AddItem(ExcludeEffects);

	MeleeTarget = new class'X2AbilityTarget_MovingMelee';
	Template.AbilityTargetStyle = MeleeTarget;

	Template.TargetingMethod = class'X2TargetingMethod_MeleePath';

	Template.AbilityTriggers.AddItem(new class'X2AbilityTrigger_PlayerInput');
	Template.AbilityTriggers.AddItem(new class'X2AbilityTrigger_EndOfMove');

	DamageImmunity = new class'X2Effect_DamageImmunity';
	DamageImmunity.BuildPersistentEffect(1, true, true, true);
	DamageImmunity.ImmuneTypes.AddItem(class'X2Item_DefaultDamageTypes'.default.KnockbackDamageType);
	DamageImmunity.EffectName = default.IcarusDropGrabberDamageImmunityEffectName;
	Template.AddShooterEffect(DamageImmunity);

	IcarusDropGrabberEffect = new class'X2Effect_PersistentStatChange';
	IcarusDropGrabberEffect.BuildPersistentEffect(1, true, true);
	IcarusDropGrabberEffect.DuplicateResponse = eDupe_Ignore;
	IcarusDropGrabberEffect.EffectName = default.IcarusDropGrabberEffectName;
	IcarusDropGrabberEffect.EffectAddedFn = IcarusDropGrab_EffectAdded;
	IcarusDropGrabberEffect.CustomIdleOverrideAnim = 'NO_IcarusDrop_Loop';
	IcarusDropGrabberEffect.AddPersistentStatChange(eStat_Dodge, default.ICARUS_DROP_GRAB_DEFENSE);
	IcarusDropGrabberEffect.AddPersistentStatChange(eStat_Defense, default.ICARUS_DROP_GRAB_DEFENSE);
	Template.AddShooterEffect(IcarusDropGrabberEffect);

	// Add to the target the sustained bind effect
	SustainedEffect = new class'X2Effect_Sustained';
	SustainedEffect.FragileAmount = default.ICARUS_DROP_FRAGILE_AMOUNT;
	SustainedEffect.EffectName = default.IcarusDropGrabbeeEffect_SustainedName;
	SustainedEffect.EffectRemovedSourceVisualizationFn = IcarusGrabRelease_Source_BuildVisualization;
	SustainedEffect.EffectRemovedVisualizationFn = IcarusGrabRelease_Target_BuildVisualization;
	SustainedEffect.BuildPersistentEffect(1, true, true, true, eGameRule_PlayerTurnBegin);
	SustainedEffect.bBringRemoveVisualizationForward = true;
	SustainedEffect.EffectAddedFn = IcarusDropGrab_EffectAdded;
	SustainedEffect.EffectRemovedFn = IcarusDropGrabee_EffectRemoved;
	SustainedEffect.RegisterAdditionalEventsLikeImpair.AddItem('AffectedByStasis');
	SustainedEffect.RegisterAdditionalEventsLikeImpair.AddItem('StunStrikeActivated');
	SustainedEffect.CustomIdleOverrideAnim = 'NO_IcarusDrop_Loop';

	// This source effect needs to be set as a child on the sustain effect
	SustainedEffect.EffectsToRemoveFromSource.AddItem(default.IcarusDropGrabberEffectName);
	SustainedEffect.EffectsToRemoveFromSource.AddItem(default.IcarusDropGrabberDamageImmunityEffectName);

	SustainedEffect.EffectsToRemoveFromSource.AddItem(default.IcarusDropGrabbeeAnimSetEffectName);

	// All child effects to the sustained effect have been added, submit
	Template.AddTargetEffect(SustainedEffect);

	// The target may not have the required animsets, so add them on
	AdditionalAnimSetsEffect = new class'X2Effect_AdditionalAnimSets';
	AdditionalAnimSetsEffect.EffectName = default.IcarusDropGrabbeeAnimSetEffectName;
	AdditionalAnimSetsEffect.AddAnimSetWithPath("DLC_60_Soldier_IcarusDrop_ANIM.Anims.AS_IcarusDrop");
	Template.AddTargetEffect(AdditionalAnimSetsEffect);

	Template.BuildNewGameStateFn = TypicalMoveEndAbility_BuildGameState;
	Template.BuildInterruptGameStateFn = TypicalMoveEndAbility_BuildInterruptGameState;
	Template.BuildVisualizationFn = IcarusDropGrab_BuildVisualization;
	Template.BuildAffectedVisualizationSyncFn = IcarusDropGrab_BuildVisualizationSync;

	Template.CinescriptCameraType = "ArchonKing_IcarusDropGrab";

	// we're going to use a movement follow cam in the action, so don't frame the ability
	Template.FrameAbilityCameraType = eCameraFraming_Never; 

//BEGIN AUTOGENERATED CODE: Template Overrides 'IcarusDropGrab'
	Template.bFrameEvenWhenUnitIsHidden = true;
//END AUTOGENERATED CODE: Template Overrides 'IcarusDropGrab'
	class'X2Ability_DLC_Day60AlienRulers'.static.RemoveMimicBeaconsFromTargets(Template);
	return Template;
}

static function IcarusDropGrab_EffectAdded(X2Effect_Persistent PersistentEffect, const out EffectAppliedData ApplyEffectParameters, XComGameState_BaseObject kNewTargetState, XComGameState NewGameState)
{
	local XComGameState_Unit UnitState;
	local TTile Tile, StartTileLocation, EndTileLocation, EnviroDmgEndTileLoc;
	local XComGameState_EnvironmentDamage WorldDamage;
	local XComWorldData World;
	local X2EventManager EventManager;

	World = `XWORLD;
	EventManager = `XEVENTMGR;

	UnitState = XComGameState_Unit(kNewTargetState);
	`assert(UnitState != none);

	// TODO: Need to find an open tile in the sky
	// solve the path to get him to the fire location
	StartTileLocation = UnitState.TileLocation;
	EndTileLocation = UnitState.TileLocation;
	EndTileLocation.Z = Min(UnitState.TileLocation.Z + (World.WORLD_FloorHeightsPerLevel * default.ICARUS_DROP_FLY_HEIGHT_MODIFIER), (World.NumZ - 1));

	// Move the target to this space
	UnitState.SetVisibilityLocation(EndTileLocation);

	// The flight may not goto the highest point, so add some damage above to clear floors
	EnviroDmgEndTileLoc = EndTileLocation;
	EnviroDmgEndTileLoc.Z += default.ICARUS_DROP_TILE_DMG_HEIGHT_MODIFIER;
	Tile = StartTileLocation;
	while(Tile != EnviroDmgEndTileLoc)
	{
		++Tile.Z;

		WorldDamage = XComGameState_EnvironmentDamage(NewGameState.CreateNewStateObject(class'XComGameState_EnvironmentDamage'));

		WorldDamage.DamageTypeTemplateName = 'NoFireExplosion';
		WorldDamage.DamageCause = UnitState.GetReference();
		WorldDamage.DamageSource = WorldDamage.DamageCause;
		WorldDamage.bRadialDamage = false;
		WorldDamage.HitLocationTile = Tile;
		WorldDamage.DamageTiles.AddItem(WorldDamage.HitLocationTile);

		WorldDamage.DamageDirection.X = 0.0f;
		WorldDamage.DamageDirection.Y = 0.0f;
		WorldDamage.DamageDirection.Z = -1.0f;

		WorldDamage.DamageAmount = 30;
		WorldDamage.PhysImpulse = 10;
	}

	EventManager.TriggerEvent('ObjectMoved', UnitState, UnitState, NewGameState);
	EventManager.TriggerEvent('UnitMoveFinished', UnitState, UnitState, NewGameState);
}

static function IcarusDropGrabee_EffectRemoved(X2Effect_Persistent PersistentEffect, const out EffectAppliedData ApplyEffectParameters, XComGameState NewGameState, bool bCleansed)
{
	local XComGameState_Unit TargetUnitState;
	local vector TargetLocation, LandingLocation;
	local TTile EndTileLocation;
	local XComWorldData World;
	local X2EventManager EventManager;

	World = `XWORLD;
	EventManager = `XEVENTMGR;

	TargetUnitState = XComGameState_Unit(NewGameState.GetGameStateForObjectID(ApplyEffectParameters.TargetStateObjectRef.ObjectID));
	if( TargetUnitState == none )
	{
		TargetUnitState = XComGameState_Unit(NewGameState.ModifyStateObject(class'XComGameState_Unit', ApplyEffectParameters.TargetStateObjectRef.ObjectID));
	}

	TargetLocation = World.GetPositionFromTileCoordinates(TargetUnitState.TileLocation);

	LandingLocation = TargetLocation;
	LandingLocation.Z = World.GetFloorZForPosition(TargetLocation, true);
	EndTileLocation = World.GetTileCoordinatesFromPosition(LandingLocation);

	// Move the target to this space
	TargetUnitState.SetVisibilityLocation(EndTileLocation);

	EventManager.TriggerEvent('ObjectMoved', TargetUnitState, TargetUnitState, NewGameState);
	EventManager.TriggerEvent('UnitMoveFinished', TargetUnitState, TargetUnitState, NewGameState);
}

simulated function IcarusGrabRelease_Source_BuildVisualization(XComGameState VisualizeGameState, out VisualizationActionMetadata ActionMetadata, const name EffectApplyResult)
{
	local XComGameStateHistory History;
	local XComGameState_Effect SustainedEffectState;
	local XComGameState_Unit OldUnitState, TargetState;
	local X2Action_DLC_Day60IcarusDropRelease ReleaseAction;
	local XComGameStateVisualizationMgr VisualizationMgr;
	local X2Action TargetDropAction;

	if( ActionMetadata.VisualizeActor != None )
	{
		VisualizationMgr = `XCOMVISUALIZATIONMGR;
		History = `XCOMHISTORY;

		OldUnitState = XComGameState_Unit(ActionMetadata.StateObject_OldState);
		SustainedEffectState = OldUnitState.GetUnitApplyingEffectState(default.IcarusDropGrabbeeEffect_SustainedName);
		`assert(SustainedEffectState != none);
		TargetState = XComGameState_Unit(History.GetGameStateForObjectID(SustainedEffectState.ApplyEffectParameters.TargetStateObjectRef.ObjectID));
		`assert(TargetState != none);

		TargetDropAction = VisualizationMgr.GetNodeOfType(VisualizationMgr.BuildVisTree, class'X2Action_DLC_Day60IcarusDropRelease_Target', , TargetState.ObjectID);
		if( TargetDropAction == none )
		{
			TargetDropAction = VisualizationMgr.GetNodeOfType(VisualizationMgr.VisualizationTree, class'X2Action_DLC_Day60IcarusDropRelease_Target', , TargetState.ObjectID);
		}

		if( TargetDropAction != none )
		{
			ReleaseAction = X2Action_DLC_Day60IcarusDropRelease(class'X2Action_DLC_Day60IcarusDropRelease'.static.AddToVisualizationTree(ActionMetadata, VisualizeGameState.GetContext(), false, , TargetDropAction.ParentActions));
		}
		else
		{
			ReleaseAction = X2Action_DLC_Day60IcarusDropRelease(class'X2Action_DLC_Day60IcarusDropRelease'.static.AddToVisualizationTree(ActionMetadata, VisualizeGameState.GetContext(), false, ActionMetadata.LastActionAdded));
		}

		ReleaseAction.PartnerRef = TargetState.GetReference();
		ReleaseAction.AddInputEvent('Visualizer_AbilityHit');
		ReleaseAction.AddInputEvent('Visualizer_ProjectileHit');
	}
}

simulated function IcarusGrabRelease_Target_BuildVisualization(XComGameState VisualizeGameState, out VisualizationActionMetadata ActionMetadata, const name EffectApplyResult)
{
	local XComGameStateVisualizationMgr VisualizationMgr;
	local array<X2Action> FoundActions;
	local XComGameState_Effect SustainedEffectState;
	local XComGameState_Unit OldUnitState;
	local X2Action_Fire TestAction;
	local int i;
	local XComGameStateContext_Ability AbilityContext;
	local X2Action ParentAction;
	local X2Action_DLC_Day60IcarusDropRelease_Target ReleaseAction;

	if(ActionMetadata.VisualizeActor != None)
	{
		VisualizationMgr = `XCOMVISUALIZATIONMGR;

		VisualizationMgr.GetNodesOfType(VisualizationMgr.VisualizationTree, class'X2Action_Fire', FoundActions);

		OldUnitState = XComGameState_Unit(ActionMetadata.StateObject_OldState);
		SustainedEffectState = OldUnitState.GetUnitAffectedByEffectState(default.IcarusDropGrabbeeEffect_SustainedName);

		ParentAction = ActionMetadata.LastActionAdded;
		for( i = 0; i < FoundActions.Length; ++i )
		{
			TestAction = X2Action_Fire(FoundActions[i]);
			AbilityContext = XComGameStateContext_Ability(TestAction.StateChangeContext);
			if( !TestAction.bCompleted &&
				((AbilityContext.InputContext.PrimaryTarget == SustainedEffectState.ApplyEffectParameters.SourceStateObjectRef) /*||
				(AbilityContext.InputContext.MultiTargets.FindItem('ObjectID', SustainedEffectState.ApplyEffectParameters.SourceStateObjectRef.ObjectID) != INDEX_NONE)*/) )
			{
				ParentAction = TestAction;
				break;
			}
		}

		ReleaseAction = X2Action_DLC_Day60IcarusDropRelease_Target(class'X2Action_DLC_Day60IcarusDropRelease_Target'.static.AddToVisualizationTree(ActionMetadata, VisualizeGameState.GetContext(), false, ParentAction));
		ReleaseAction.AddInputEvent('Visualizer_AbilityHit');
		ReleaseAction.AddInputEvent('Visualizer_ProjectileHit');
	}
}

function IcarusDropGrab_BuildVisualization(XComGameState VisualizeGameState)
{
	local XComGameStateHistory History;
	local XComGameStateContext_Ability AbilityContext;
	local VisualizationActionMetadata EmptyTrack;
	local VisualizationActionMetadata ActionMetadata;
	local X2Action_PlaySoundAndFlyOver SoundAndFlyOver;
	local XComGameState_Ability AbilityState;
	local int i;	
	local XComGameState_EnvironmentDamage DamageEventStateObject;
	local X2Action_MoveEnd MoveEndAction;
	local XComGameStateVisualizationMgr VisualizationMgr;

	History = `XCOMHISTORY;
	VisualizationMgr = `XCOMVISUALIZATIONMGR;

	AbilityContext = XComGameStateContext_Ability(VisualizeGameState.GetContext());

	// first build any movement visualization
	if( AbilityContext.InputContext.MovementPaths.Length > 0 )
	{
		class'X2Ability_DefaultAbilitySet'.static.MoveAbility_BuildVisualization(VisualizeGameState);
	}

	//Configure the visualization track for the shooter
	//****************************************************************************************
	ActionMetadata = EmptyTrack;

	ActionMetadata.StateObject_OldState = History.GetGameStateForObjectID(AbilityContext.InputContext.SourceObject.ObjectID, eReturnType_Reference, VisualizeGameState.HistoryIndex - 1);
	ActionMetadata.StateObject_NewState = VisualizeGameState.GetGameStateForObjectID(AbilityContext.InputContext.SourceObject.ObjectID);
	ActionMetadata.VisualizeActor = History.GetVisualizer(AbilityContext.InputContext.SourceObject.ObjectID);

	MoveEndAction = X2Action_MoveEnd(VisualizationMgr.GetNodeOfType(VisualizationMgr.BuildVisTree, class'X2Action_MoveEnd', ActionMetadata.VisualizeActor));
	if (MoveEndAction != none)
	{
		MoveEndAction.IgnoreDestinationMismatch = true;
		MoveEndAction.bNotifyEnvironmentDamage = false;
	}

	ActionMetadata.AdditionalVisualizeActors.AddItem(History.GetVisualizer(AbilityContext.InputContext.PrimaryTarget.ObjectID));

	class'X2Action_ExitCover'.static.AddToVisualizationTree(ActionMetadata, AbilityContext);
	class'X2Action_DLC_Day60IcarusDropGrab'.static.AddToVisualizationTree(ActionMetadata, AbilityContext);

	for( i = 0; i < AbilityContext.ResultContext.ShooterEffectResults.Effects.Length; ++i )
	{
		AbilityContext.ResultContext.ShooterEffectResults.Effects[i].AddX2ActionsForVisualization(VisualizeGameState, ActionMetadata, AbilityContext.ResultContext.ShooterEffectResults.ApplyResults[i]);
	}

	AbilityState = XComGameState_Ability(History.GetGameStateForObjectID(AbilityContext.InputContext.AbilityRef.ObjectID));
	SoundAndFlyOver = X2Action_PlaySoundAndFlyOver(class'X2Action_PlaySoundAndFlyOver'.static.AddToVisualizationTree(ActionMetadata, AbilityContext));
	SoundAndFlyOver.SetSoundAndFlyOverParameters(None, "", AbilityState.GetMyTemplate().ActivationSpeech, eColor_Good);

		//****************************************************************************************

	//Configure the visualization track for the target
	//****************************************************************************************
	ActionMetadata = EmptyTrack;
	ActionMetadata.StateObject_OldState = History.GetGameStateForObjectID(AbilityContext.InputContext.PrimaryTarget.ObjectID, eReturnType_Reference, VisualizeGameState.HistoryIndex - 1);
	ActionMetadata.StateObject_NewState = VisualizeGameState.GetGameStateForObjectID(AbilityContext.InputContext.PrimaryTarget.ObjectID);
	ActionMetadata.VisualizeActor = History.GetVisualizer(AbilityContext.InputContext.PrimaryTarget.ObjectID);

	class'X2Action_UpdateAnimations'.static.AddToVisualizationTree(ActionMetadata, AbilityContext);

	//****************************************************************************************

	if( AbilityContext.InputContext.MovementPaths.Length == 0 )
	{
		// add visualization of environment damage
		foreach VisualizeGameState.IterateByClassType( class'XComGameState_EnvironmentDamage', DamageEventStateObject )
		{
			ActionMetadata = EmptyTrack;
			ActionMetadata.StateObject_OldState = DamageEventStateObject;
			ActionMetadata.StateObject_NewState = DamageEventStateObject;
			ActionMetadata.VisualizeActor = `XCOMHISTORY.GetVisualizer(DamageEventStateObject.ObjectID);
			class'X2Action_WaitForAbilityEffect'.static.AddToVisualizationTree(ActionMetadata, AbilityContext);
			class'X2Action_ApplyWeaponDamageToTerrain'.static.AddToVisualizationTree(ActionMetadata, AbilityContext);			
		}
	}
}

simulated function IcarusDropGrab_BuildVisualizationSync(name EffectName, XComGameState VisualizeGameState, out VisualizationActionMetadata ActionMetadata)
{
	local X2Action_ExitCover ExitCoverAction;	

	if( EffectName == default.IcarusDropGrabberEffectName )
	{
		ExitCoverAction = X2Action_ExitCover(class'X2Action_ExitCover'.static.AddToVisualizationTree(ActionMetadata, VisualizeGameState.GetContext()));
		ExitCoverAction.bIsForSuppression = true;   // Not really a supression, but this bool keeps the sync from being forced to finish before the action has completed
		class'X2Action_DLC_Day60IcarusDropGrab'.static.AddToVisualizationTree(ActionMetadata, VisualizeGameState.GetContext());
	}

	if( EffectName == default.IcarusDropGrabbeeEffect_SustainedName )
	{
		class'X2Action_UpdateAnimations'.static.AddToVisualizationTree(ActionMetadata, VisualizeGameState.GetContext());
	}
}

static function X2AbilityTemplate CreateIcarusDropSlamAbility()
{
	local X2AbilityTemplate Template;
	local X2AbilityCost_ActionPoints ActionPointCost;
	local X2AbilityTarget_MovingMelee MeleeTarget;
	local X2Condition_UnitEffectsWithAbilitySource RequiredEffects;
	local X2Condition_UnitEffects ExcludeEffects;
	local X2Effect_Persistent IcarusDropSlammerEffect;
	local X2Effect_ImmediateAbilityActivation ImpairingAbilityEffect;
	local X2Effect_ApplyWeaponDamage DamageEffect;
	local X2Effect_RemoveEffects RemoveEffects;

	`CREATE_X2ABILITY_TEMPLATE(Template, 'IcarusDropSlam');
	Template.IconImage = "img:///UILibrary_DLC2Images.UIPerk_archon_icarusdrop";
	Template.Hostility = eHostility_Neutral;
	Template.AbilitySourceName = 'eAbilitySource_Standard';

	ActionPointCost = new class'X2AbilityCost_ActionPoints';
	ActionPointCost.iNumPoints = 1;
	ActionPointCost.bConsumeAllPoints = false;
	Template.AbilityCosts.AddItem(ActionPointCost);

	Template.AbilityToHitCalc = default.DeadEye;
	Template.AbilityTargetStyle = default.SimpleSingleMeleeTarget;

	Template.AbilityShooterConditions.AddItem(default.LivingShooterProperty);

	Template.AbilityTargetConditions.AddItem(default.LivingHostileTargetProperty);

	// The Shooter must have a unit that it is grabing
	RequiredEffects = new class'X2Condition_UnitEffectsWithAbilitySource';
	RequiredEffects.AddRequireEffect(default.IcarusDropGrabbeeEffect_SustainedName, 'AA_UnitIsBound');
	Template.AbilityTargetConditions.AddItem(RequiredEffects);

	// The target must not have a cocoon on top of it
	ExcludeEffects = new class'X2Condition_UnitEffects';
	ExcludeEffects.AddExcludeEffect(class'X2Ability_ChryssalidCocoon'.default.GestationStage1EffectName, 'AA_UnitHasCocoonOnIt');
	ExcludeEffects.AddExcludeEffect(class'X2Ability_ChryssalidCocoon'.default.GestationStage2EffectName, 'AA_UnitHasCocoonOnIt');
	Template.AbilityTargetConditions.AddItem(ExcludeEffects);

	MeleeTarget = new class'X2AbilityTarget_MovingMelee';
	MeleeTarget.MovementRangeAdjustment = 0;

	Template.AbilityTriggers.AddItem(new class'X2AbilityTrigger_PlayerInput');

	IcarusDropSlammerEffect = new class'X2Effect_Persistent';
	IcarusDropSlammerEffect.BuildPersistentEffect(1, false, true);
	IcarusDropSlammerEffect.EffectName = 'IcarusDropSlammerEffect';
	IcarusDropSlammerEffect.EffectAddedFn = IcarusDropSlammer_EffectAdded;
	Template.AddShooterEffect(IcarusDropSlammerEffect);

	DamageEffect = new class'X2Effect_ApplyWeaponDamage';
	DamageEffect.bIgnoreBaseDamage = true;
	DamageEffect.EffectDamageValue = class'X2Item_DLC_Day60Weapons'.default.ARCHONKING_ICARUS_DROP_BASEDAMAGE;
	Template.AddTargetEffect(DamageEffect);

	// Target Effects
	//Impairing effects need to come after the damage. This is needed for proper visualization ordering.
	//Effect on a successful slam attack is triggering the Apply Impairing Effect Ability
	ImpairingAbilityEffect = new class 'X2Effect_ImmediateAbilityActivation';
	ImpairingAbilityEffect.BuildPersistentEffect(1, false, true, , eGameRule_PlayerTurnBegin);
	ImpairingAbilityEffect.EffectName = 'ImmediateStunImpair';
	ImpairingAbilityEffect.AbilityName = class'X2Ability_Impairing'.default.ImpairingAbilityName;
	ImpairingAbilityEffect.VisualizationFn = class'X2Ability_Impairing'.static.ImpairingAbilityEffectTriggeredVisualization;
	Template.AddTargetEffect(ImpairingAbilityEffect);

	RemoveEffects = new class'X2Effect_RemoveEffects';
	RemoveEffects.EffectNamesToRemove.AddItem(default.IcarusDropGrabbeeEffect_SustainedName);
	Template.AddTargetEffect(RemoveEffects);

	Template.BuildNewGameStateFn = TypicalAbility_BuildGameState;
	Template.BuildVisualizationFn = IcarusDropSlam_BuildVisualization;

	Template.CinescriptCameraType = "ArchonKing_IcarusDropSlam";

	Template.LostSpawnIncreasePerUse = class'X2AbilityTemplateManager'.default.StandardShotLostSpawnIncreasePerUse;
	
	return Template;
}

static function IcarusDropSlammer_EffectAdded(X2Effect_Persistent PersistentEffect, const out EffectAppliedData ApplyEffectParameters, XComGameState_BaseObject kNewTargetState, XComGameState NewGameState)
{
	local XComGameState_Unit SourceUnitState;
	local vector TargetLocation, LandingLocation;
	local TTile EndTileLocation;
	local XComWorldData World;
	local X2EventManager EventManager;

	World = `XWORLD;
	EventManager = `XEVENTMGR;

	SourceUnitState = XComGameState_Unit(kNewTargetState);
	`assert(SourceUnitState != none);

	// TODO: Need to find an open tile in the sky
	// solve the path to get him to the fire location
	// Find a valid landing location
	TargetLocation = World.GetPositionFromTileCoordinates(SourceUnitState.TileLocation);

	LandingLocation = TargetLocation;
	LandingLocation.Z = World.GetFloorZForPosition(TargetLocation, true);
	EndTileLocation = World.GetTileCoordinatesFromPosition(LandingLocation);

	// Move the target to this space
	SourceUnitState.SetVisibilityLocation(EndTileLocation);

//	`SHAPEMGR.DrawSphere(LandingLocation, vect(15,15,15), MakeLinearColor(1,0,0,1), true);

	EventManager.TriggerEvent('ObjectMoved', SourceUnitState, SourceUnitState, NewGameState);
	EventManager.TriggerEvent('UnitMoveFinished', SourceUnitState, SourceUnitState, NewGameState);
}

static function IcarusDropSlammee_EffectAdded(X2Effect_Persistent PersistentEffect, const out EffectAppliedData ApplyEffectParameters, XComGameState_BaseObject kNewTargetState, XComGameState NewGameState)
{
	local XComGameState_Unit TargetUnitState;
	local vector TargetLocation, LandingLocation;
	local TTile EndTileLocation;
	local XComWorldData World;
	local X2EventManager EventManager;

	World = `XWORLD;
	EventManager = `XEVENTMGR;

	TargetUnitState = XComGameState_Unit(kNewTargetState);
	`assert(TargetUnitState != none);

	// TODO: Need to find an open tile in the sky
	// solve the path to get him to the fire location
	TargetLocation = World.GetPositionFromTileCoordinates(TargetUnitState.TileLocation);

	LandingLocation = TargetLocation;
	LandingLocation.Z = World.GetFloorZForPosition(TargetLocation, true);
	EndTileLocation = World.GetTileCoordinatesFromPosition(LandingLocation);

	// Move the target to this space
	TargetUnitState.SetVisibilityLocation(EndTileLocation);

	EventManager.TriggerEvent('ObjectMoved', TargetUnitState, TargetUnitState, NewGameState);
	EventManager.TriggerEvent('UnitMoveFinished', TargetUnitState, TargetUnitState, NewGameState);
}

function IcarusDropSlam_BuildVisualization(XComGameState VisualizeGameState)
{
	local XComGameStateHistory History;
	local XComGameStateContext_Ability AbilityContext;
	local VisualizationActionMetadata	EmptyTrack;
	local VisualizationActionMetadata	ActionMetadata;
	local XComGameState_Ability Ability;
	local X2Action_PlaySoundAndFlyOver SoundAndFlyover;
	local X2VisualizerInterface TargetVisualizerInterface;	
	local int i;

	History = `XCOMHISTORY;

	AbilityContext = XComGameStateContext_Ability(VisualizeGameState.GetContext());

	//Configure the visualization track for the shooter
	//****************************************************************************************
	ActionMetadata = EmptyTrack;
	ActionMetadata.StateObject_OldState = History.GetGameStateForObjectID(AbilityContext.InputContext.SourceObject.ObjectID, eReturnType_Reference, VisualizeGameState.HistoryIndex - 1);
	ActionMetadata.StateObject_NewState = VisualizeGameState.GetGameStateForObjectID(AbilityContext.InputContext.SourceObject.ObjectID);
	ActionMetadata.VisualizeActor = History.GetVisualizer(AbilityContext.InputContext.SourceObject.ObjectID);
	ActionMetadata.AdditionalVisualizeActors.AddItem(History.GetVisualizer(AbilityContext.InputContext.PrimaryTarget.ObjectID));

	class'X2Action_DLC_Day60IcarusDropSlam'.static.AddToVisualizationTree(ActionMetadata, AbilityContext);

	Ability = XComGameState_Ability(History.GetGameStateForObjectID(AbilityContext.InputContext.AbilityRef.ObjectID));
	SoundAndFlyOver = X2Action_PlaySoundAndFlyOver(class'X2Action_PlaySoundAndFlyOver'.static.AddToVisualizationTree(ActionMetadata, AbilityContext));
	SoundAndFlyOver.SetSoundAndFlyOverParameters(None, "", Ability.GetMyTemplate().ActivationSpeech, eColor_Good);

		//****************************************************************************************

	//Configure the visualization track for the target
	//****************************************************************************************
	ActionMetadata = EmptyTrack;
	ActionMetadata.StateObject_OldState = History.GetGameStateForObjectID(AbilityContext.InputContext.PrimaryTarget.ObjectID, eReturnType_Reference, VisualizeGameState.HistoryIndex - 1);
	ActionMetadata.StateObject_NewState = VisualizeGameState.GetGameStateForObjectID(AbilityContext.InputContext.PrimaryTarget.ObjectID);
	ActionMetadata.VisualizeActor = History.GetVisualizer(AbilityContext.InputContext.PrimaryTarget.ObjectID);	

	for( i = 0; i < AbilityContext.ResultContext.TargetEffectResults.Effects.Length; ++i )
	{
		// Loop over the target effects and do their visualizations
		// Except skip the X2Effect_RemoveEffects, we are dealing with that viaualization
		// during the slam action above
		if( X2Effect_RemoveEffects(AbilityContext.ResultContext.TargetEffectResults.Effects[i]) == none )
		{
			AbilityContext.ResultContext.TargetEffectResults.Effects[i].AddX2ActionsForVisualization(VisualizeGameState, ActionMetadata, AbilityContext.ResultContext.TargetEffectResults.ApplyResults[i]);

			// If this is the X2Effect_ApplyWeaponDamage, deal with possible death/unconscious visualization
			// Then wait for the slam to finish
			if( X2Effect_ApplyWeaponDamage(AbilityContext.ResultContext.TargetEffectResults.Effects[i]) != none )
			{
				TargetVisualizerInterface = X2VisualizerInterface(ActionMetadata.VisualizeActor);
				if( TargetVisualizerInterface != none )
				{
					//Allow the visualizer to do any custom processing based on the new game state. For example, units will create a death action when they reach 0 HP.
					TargetVisualizerInterface.BuildAbilityEffectsVisualization(VisualizeGameState, ActionMetadata);
				}
			}
		}
	}

		//****************************************************************************************
}

defaultproperties
{
	KingBlazingPinionsStage2AbilityName="ArchonKingBlazingPinionsStage2"
	IcarusDropGrabbeeAnimSetEffectName="IcarusDropGrabbeeAnimSetEffect"
	IcarusDropGrabbeeEffect_SustainedName="IcarusDropGrabbeeEffect_Sustained"
	IcarusDropGrabberEffectName="IcarusDropGrabberEffect"
	IcarusDropGrabberDamageImmunityEffectName="IcarusDropGrabberDamageImmunityEffect"
}
